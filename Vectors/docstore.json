{"docstore/metadata": {"2f4895cc-44dd-43bb-885e-58bbac3cda04": {"doc_hash": "f4cdb3d753a75a63baad31080b464ad93697ab1503bbcb914a4240c751776fb6"}, "3ed15960-b4db-4f00-8fcb-99aa259fe9fc": {"doc_hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571"}, "534d6b09-3243-4745-8ffc-9500e1bba1f0": {"doc_hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615"}, "30bcef86-6ac1-4e49-a995-81cf5e30cb7d": {"doc_hash": "d2e2bf3a561cf46d80b12c4e62d453881e52bda6b195f3682a73a52a0c5d8e36"}, "c3df90dc-5eb4-4aa0-befa-38adc10f885c": {"doc_hash": "df2c6a9d7f02f83f041a342eacb6932f96a942491d89fa341d25999b1202ea0c"}, "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382": {"doc_hash": "3819b8e717dff46f848b0568f31b7da667a600720678f4204c9c791022e7814b"}, "d0c5b4c6-1282-4fbc-a989-168494d920a7": {"doc_hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1"}, "7cae7cea-0cc1-40b9-a985-0a2b79001fec": {"doc_hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53"}, "3d08291a-17c8-4b27-bea9-216bc4194283": {"doc_hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562"}, "1dfbed65-f739-4161-8b53-7c41703635da": {"doc_hash": "cfb788fa5bb79319d70e202d0095837fd69e174326d978b1898cbf3a778a31f7"}, "f05303ff-bb1a-498c-a3f6-9b67011d5459": {"doc_hash": "84c64d3df166d6007c1cb936886802cbb74ed23062693b0e2907248e8ef703ee"}, "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa": {"doc_hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631"}, "869187dd-05cc-45da-af3b-a6a2c1c61430": {"doc_hash": "8ecee4eb88b3ee1f07d44a4c698fea4f806983a07522519ccdb7b1b4b7a9258b", "ref_doc_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04"}, "0e88d51f-3e8b-42a9-a2ac-719403f35fa6": {"doc_hash": "f7d08074b3f25d0713c6ee3d96288752a17c7c9d3463bc715a69680252e15a07", "ref_doc_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04"}, "34867761-ca92-49f5-93a2-fae7653fc3e7": {"doc_hash": "1751db84e233e82fad1730c3cd8e27e7891abfd7c15f8a17b7b3e6b432a4e122", "ref_doc_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04"}, "93e67c8e-01ec-44c6-a2c2-be2a72b79900": {"doc_hash": "ce20a3e10bb24e879b3a8ad00d40c6190f6c900c2b6d114bc8d4885206995540", "ref_doc_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04"}, "5e9ae342-14cb-45ac-bd46-0c090894dfff": {"doc_hash": "d597937ae1ceeae6f35cb9ca61763533c0511e433457817d13f60790efe7c542", "ref_doc_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc"}, "99ae456d-79b6-433c-92bc-5fbe18061d49": {"doc_hash": "222de895a7630b8a959a29ed6f211236de1700998ed020b48250093b2b340214", "ref_doc_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc"}, "e197ee7c-250f-48c7-a754-16dffa1d12ad": {"doc_hash": "461f2ade5717181ead118a0cdb6f666aa8afdef3a5483bf58b9ae6e72f6ff73a", "ref_doc_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc"}, "330cac46-4de1-420b-9e42-e2d18f5cdc3f": {"doc_hash": "c14c111214fe82df6b44cfcd4eaac9b67030d80a7dd4a88f24fa9a815e99b2eb", "ref_doc_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc"}, "5b543fb8-50c6-4bfc-9b6d-ffaef64f8726": {"doc_hash": "a0da6ef49ee60f835abc665c3f456337a4e9588019649672500c43c35528e85a", "ref_doc_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc"}, "de6a41f6-eaba-410f-b3f3-fc344bf64f16": {"doc_hash": "e0d9a5cf15baa79f05618fb50784e9b77c20d753770c5f6207e1706218b97028", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "be143822-5c5e-431e-bd74-379598bbbf61": {"doc_hash": "562cdec0697a1f393f0ec0666d19905ef8abcb5dbc03f61b5f9fded25f254053", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8": {"doc_hash": "10f0fb89b5632064fecb99880697b2cc182623fa84195b5a8f50cce0aa3fca68", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "60ce164b-857f-4597-91d5-59e1b75b420b": {"doc_hash": "7214847911b4d03bf79f46e0a4c5cfe207795b9c3dbc9d651ca8c597d3b955b3", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "22dff272-c3b1-44c2-a327-a3b8b78540ef": {"doc_hash": "43f15a34372bb8fe6a901fbfdc20f6c8f4963f35374a5caaf4ea8c3e3aeb63e8", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "c83d2d10-8812-410e-8d04-59b690abf466": {"doc_hash": "a0a03af2e6f77681489c39be1e55937725ec62e5d8e2c6dc3b851033de4dc014", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd": {"doc_hash": "35e9a46cb1033259056370b6ed4ceb3c2c0d836b04460f26df80236dbbff3e12", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "f529ddeb-5375-4cce-b311-a6790ab1dc1f": {"doc_hash": "9c366eaa349a6222ae64bfa002d318684cabea0a56543c6915657b705a92fa49", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "15c1a737-f5fd-4da0-aee9-7ee6cf864eea": {"doc_hash": "503263c10895af050753bf270f8c19c02f066884022c39d937a1da31022c7130", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "ed343f4d-713a-475d-a14d-edea546a84c6": {"doc_hash": "892483278d11649ac6cd2f60a6a8cfaaf9cf9e5f130b6cf6d3fc515c76d0de75", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "d03b2af9-c409-4096-a06e-cb2930365c0f": {"doc_hash": "8f6d558beb1cc913f0596849556a83d5427fcf6b462a2f6b069fab47452110db", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "8f029def-8a14-4b87-b19c-f81a4e3a8b0b": {"doc_hash": "7d6e928c8997d20ea5237cb9db62bc725dbe5301be0ce70f1ff9de3be47d4b6c", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "5e425670-fb3d-4e56-b13a-1b35e244b6e8": {"doc_hash": "dfda3b82f8860108f263a09e7c61d7d216c7d0b69b2db8e2e8775b89a6a43d8a", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07": {"doc_hash": "6043567311b68506372deef1829e70d0bf6ca17954fa1d1fe175ebbb2532b44e", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "242ec554-0b84-44e0-b1ed-e396f003f1ca": {"doc_hash": "80615ddc7ad9ac88a89fcbb08b04699170ad79e389407da4bd18d59d92099b4f", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5": {"doc_hash": "034cee79cae4a3017902add6965445b26507215e93a2a56901fa898011dd1424", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "0826d36a-04f7-4fe3-a4c3-4903e7644c03": {"doc_hash": "d0be7d78825314b7b8da66f5b663c676273eabcc4720872971ac1aa1dabb3828", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "0996652b-8eb2-4bec-b3d1-befe803eab93": {"doc_hash": "27cd4ff7f4f6b2b9850c9b17ee74875a8263844a795e7f5fb22b08c73974a8f5", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "226b832f-d6e9-4359-827d-6aaa677d81e1": {"doc_hash": "dfe12ed62d0c15e888246313da2c2b81f06ad31722f7954764c7ca69039bc8a8", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "798ebf3c-d869-4ae8-ba38-821f7fa938b1": {"doc_hash": "d6331ea4ed0023904edce8ae02df43077734a2ecf70fba1e50ff439baf22fa4c", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "90fff491-109e-467b-9019-f55b95b26d46": {"doc_hash": "050806d40af57b1a5f2378ec70218adbb415b75a4afa40dd843a19d61eccac9a", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "a1fc8580-9bef-40fd-b200-9ae280024783": {"doc_hash": "dd6d1f7038b84ffb75b1b45abcc362e4e63032bef04a2985d34f635cba5d597d", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "f2dc587f-6d1b-479b-bfdb-ba1826be763a": {"doc_hash": "e6b6e5c9cbf7bf22fc97b4aef7330a2118b2cc33539f451ad112b70f99a3d3f2", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "c7a9fbc7-766e-4ab6-8d47-4f01b2597136": {"doc_hash": "f9a589b74ee9c0f24482e547a30a75678dbccac16ccfcda57bb9fae6975e1c86", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "96e2b51f-d02b-4bab-9b14-b166ecd5813b": {"doc_hash": "89f7486c30c736875cc973d5cf264f4200e937668f7a048a171e229735bed960", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "c47cb362-05af-43b1-b443-a3bc94edc33d": {"doc_hash": "63949ea532be10f4b6eb9f9636524af0f67d821d8f7e62ad1e58862aea415da7", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "b53ab24c-4e8c-4904-b3c6-705f437d21fc": {"doc_hash": "2da3c712eb4ffb2eb4ba629180d1e863d95c0673f573de7e892770911a81d70a", "ref_doc_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0"}, "eecb45fe-0882-4e39-b4a3-d932e8ddc2a9": {"doc_hash": "810bf5e41b649cbdb5517bdbf4c58511b7aa2efb2ffb6ce6bd2a513a64b4e6de", "ref_doc_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d"}, "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e": {"doc_hash": "7f3c4d62541000bdb85c3cddd53d0a15ca8064b664b5abc9976e5d5ad7348f8b", "ref_doc_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d"}, "2c8f740b-eff5-40e1-90ab-fd8761ed53f4": {"doc_hash": "662b1fc0a6ad28f28b2653888008a3e3690b647c9c33011d77593b36531d2a14", "ref_doc_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d"}, "6f73dbe5-a6a4-4299-8dde-57349ee461e5": {"doc_hash": "ef2e271a300383f7df8fddcf3d8de1e6371a2239ca3ec18af23ca3877bb146e3", "ref_doc_id": "c3df90dc-5eb4-4aa0-befa-38adc10f885c"}, "b6f136f2-41f7-427b-972c-99d148e8f0d6": {"doc_hash": "f22b2aa15a1b856c6cc1a221f4da38499507cbc012ce8e12174b0cab2e7f2533", "ref_doc_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382"}, "c47d06ee-4281-4432-8938-e1956e39a300": {"doc_hash": "a552f71749da2e34f80924f00604331e6642760b24b731be8b09062a6af20cb8", "ref_doc_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382"}, "352bda03-c304-4a89-b936-0c4907126b12": {"doc_hash": "7bdf37271507eb7045dceebce1f9dbeaf348e0692e3cd8d26af3429635204bdd", "ref_doc_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382"}, "fbcfbe19-3584-401a-b01c-17f2c3857e6d": {"doc_hash": "67de57a1f689945d078aa62fc0709a8ec28efc5cd97c69ddb55dc3948b569371", "ref_doc_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382"}, "17ad4e46-17c8-46e4-85b5-e337fd7f3811": {"doc_hash": "c905ccdc595524868fd7248e0e016d34142a1f6c410673800aba81f3d6bb3568", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "5cb17e70-bcfa-4f60-ad28-4470886cf744": {"doc_hash": "bbc3d574d0e7146d13a06f3a4afd93d834782bd999aa871335d1bebeec61eb95", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "50605842-e7a2-4960-b44f-519a5ef694f8": {"doc_hash": "714807b16ea5ea160a7ad1d37fd52b14a69f0a36ad4960dddfc859b1ecb9b2bc", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "a18d879f-b48c-4336-9453-86f8072126f8": {"doc_hash": "4c49bc02f05b9b273c2b97962e44d12aa50c4efb4247cc3895b4e9528181cece", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "9b7e9b54-204c-44f6-a0a7-24a228c8cae6": {"doc_hash": "789d26429f4fd0507db6c6adc6ec7c1cd3b161dba38e64ebe03dc8e985be6b3f", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552": {"doc_hash": "18a46f746e144e010ec6ffb80fe81e87c7823f5343ac6842545d10c0815903f5", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "c035760e-2712-4512-82d8-349f06f40cbd": {"doc_hash": "5090ce514b4778637cb8cbd631be589ba8ee75571ded5bbf2c32795303670792", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75": {"doc_hash": "95753eda71d616d5a8569964437579ca32b0e824fce4023cee2c815660e4d576", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "78b5d6d6-68b4-44b0-b129-d8d604c65194": {"doc_hash": "095b96d7048719f34327b7545cb0d1d60e91d36e4b2efc2d77e06cb2cc60c5da", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "ec98bd42-7c0c-45ab-857d-25059459c406": {"doc_hash": "c733e2873d58e00ba388a3022665f4ba05172c90a68af82cdf431b3f1b8e56ea", "ref_doc_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7"}, "f6f1bb08-88cc-4d32-9b78-6471e91c69af": {"doc_hash": "315385168943909bd5ff8840e49a2cd7d4c6d0ebbf76f0705d7f13975b52d0e8", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "c321bcd7-dc25-4292-aa9d-fa46ec798942": {"doc_hash": "a7c4e2a203e250a57c48abcc82461897aef0aaa9d0e676b3a353250c3d518707", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "d0c08dc7-47be-4c12-b5bb-44df475f9bee": {"doc_hash": "76e76b6a5a23f1498e5817e5d221790697e540e413ec8ae54df15a4d05c46fdf", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b": {"doc_hash": "937b07ba16d993d4d9edc1ea1422c03ae8dc9c6094043815a035304304304614", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "810c5f75-bfee-4b24-ae45-2b5ee259b1ab": {"doc_hash": "dbe4c9412f362534ca6617a8296c26db8d501383fc3ccd18ae686ad6b04eae78", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "29a995dc-e395-4a21-96d8-e473f4ca2f27": {"doc_hash": "a905f4ee38fb7bc8caac2b63eddef8fe0a3094ef9843dd6c27a1f7a9d578e562", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "2c6c81cf-49a1-4d3f-9884-b02309286afe": {"doc_hash": "e01c4ac9a58ef0c29f4f246a70449826ff5d27fe3b4acc163af0093c10d6cab4", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "5e45d96b-71fa-4752-bbe0-0380e6748522": {"doc_hash": "d7d1cee7b5daafa46883f1ba88c5255739bb1015921ce2393cfa7ddde95f16a6", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "7f2073db-e48f-4cb1-8b25-4a2b396e7def": {"doc_hash": "81b78695a30765555efbfaceab7306de31abdf90acfea4419e9ece066c5374b7", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "fb32897d-ce13-43d4-8509-05f8e2e7f254": {"doc_hash": "4c0b2fbed59ad98966fb1702ae6fa4aed86362b2d5cb66eec925d0443e683564", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "c82ba85c-38d9-4f7b-a9f5-74df5c238a47": {"doc_hash": "19a2e6a92d35558b130c42f599ac0bacac893e818b243c588f8c7e8bd3f78713", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2": {"doc_hash": "d25506d8b5f414e0047ec743cf54351e5ed7ebe3c75a2bc32ae92df17fba3714", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "a9b4960f-abe9-403e-b53e-b23113a83e19": {"doc_hash": "c8df997b2dc416efd55f653a9bab644c721da6f5902fc3e283d1f4b64c9b39ce", "ref_doc_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec"}, "37708308-f3d8-4e62-b0f3-de2d56e46ab1": {"doc_hash": "b67a7766bbfb864114103012b399b0f4f2a6606c41b1c5a7e8ad1c68901113b3", "ref_doc_id": "3d08291a-17c8-4b27-bea9-216bc4194283"}, "46e7a9e7-f00d-40b1-b48e-3d0578138670": {"doc_hash": "ea138f3362fe05ebe8e2f9cd93599b6389e4afd1149631f7839331b9eca8e95f", "ref_doc_id": "3d08291a-17c8-4b27-bea9-216bc4194283"}, "32d40aa2-8b2b-47b5-8fd5-86d7beb63427": {"doc_hash": "662a19e9bd87796a39fd2a554a72978b5bee7ddfb36b5466ddc574a172fe83f1", "ref_doc_id": "3d08291a-17c8-4b27-bea9-216bc4194283"}, "e088cf52-ee34-4ada-aabc-d721748754a3": {"doc_hash": "5ef9cf626c793378497e5aebd0fe809a376f9bbb983baab9170eb25b5f7a1f81", "ref_doc_id": "3d08291a-17c8-4b27-bea9-216bc4194283"}, "8b8f2811-6b63-4d4c-9605-7bde2252d332": {"doc_hash": "19d4fb39e1eccd6a7096400a6dee5c0286781ae780b5125b29f3d2200929e407", "ref_doc_id": "3d08291a-17c8-4b27-bea9-216bc4194283"}, "8b8d1aab-cb71-408c-9b36-3d4392a9ec28": {"doc_hash": "10ad08df73a417142291d031f4ce06502f77c9c6d564ff6083facc6ceb768c16", "ref_doc_id": "1dfbed65-f739-4161-8b53-7c41703635da"}, "891fd70b-ea94-4bfa-bb70-a71744f9d0c5": {"doc_hash": "32966caf6c1dec597622f30ec670b4e0c3cc59738281dca069781edb40108bd8", "ref_doc_id": "1dfbed65-f739-4161-8b53-7c41703635da"}, "b07c7d49-28f9-45ff-8f4f-e06aa38316b2": {"doc_hash": "05eefa0a16faa40d73bfc055d98a6886c914b42723c1ccee56e76181aebcc909", "ref_doc_id": "1dfbed65-f739-4161-8b53-7c41703635da"}, "3f79e87a-9bf2-4528-ad1b-d98967f13768": {"doc_hash": "992d12c053e1b256768891716c0d8a1238449c158b5453c061252023f6bb694a", "ref_doc_id": "1dfbed65-f739-4161-8b53-7c41703635da"}, "873d7150-b78f-4a44-baa4-d408197aaf05": {"doc_hash": "d539d86806a799fe972e0ae75842e6f0b4125dd5d2d7afb03bab406f4242bd69", "ref_doc_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459"}, "8f01664e-2ddd-4401-a7c3-fd25d65fb751": {"doc_hash": "5214da5c538a7580d3da9f6ff620dbdb1b04ea09ed842d7548db51bd27bba1d9", "ref_doc_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459"}, "dd5f829a-00fb-435d-b93d-d21a64444f0b": {"doc_hash": "2225c7f6a72b4b863e29b727472e1d86321e5aa27b9171afc8f769c758f77818", "ref_doc_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459"}, "e8d57247-26a3-4e02-a744-683e6b3b0ca0": {"doc_hash": "510d198f8dc864c813f32ffcc1b67e6daeffbef50d3a8cebfd34d4753c69c6ea", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}, "b1149c73-8a55-42c1-bd21-2ec34a3a630e": {"doc_hash": "c0d37fed8af6e5a9154817267f8b5ee5f3cfdb918f2a5cae5854dd5d1ad01297", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}, "86834791-dbed-416b-ab38-474f85561c5f": {"doc_hash": "41719125c1b0f62e6412fbf7a5fde6f2975bf01a0ac972a4640289522cc9f72a", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}, "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f": {"doc_hash": "ca32965e8372945461c6840524ac0337013eace13460a2a3876b4627e6b76033", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}, "51cfbe60-1ff4-4ced-ada5-b507bc417073": {"doc_hash": "159632aecbd3092e6f58d15191d5c427f95b310bbbf67d12c9464c40e1b6a2c1", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}, "c15527ce-b872-4712-9569-ec4b9b2a18ed": {"doc_hash": "7ac31bbdba036e470878093abd115a7a239092b1b77655c1a6ccb31c297077a1", "ref_doc_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa"}}, "docstore/data": {"869187dd-05cc-45da-af3b-a6a2c1c61430": {"__data__": {"id_": "869187dd-05cc-45da-af3b-a6a2c1c61430", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "f4cdb3d753a75a63baad31080b464ad93697ab1503bbcb914a4240c751776fb6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e88d51f-3e8b-42a9-a2ac-719403f35fa6", "node_type": "1", "metadata": {}, "hash": "c37ee7d680411f928ddd52e0d30307d45f5f4da87310cac1522a89af91e9dc1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Manage Organizations | PLANQK Docs\",\n  \"content\": \"Manage Organizations | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1121, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e88d51f-3e8b-42a9-a2ac-719403f35fa6": {"__data__": {"id_": "0e88d51f-3e8b-42a9-a2ac-719403f35fa6", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "f4cdb3d753a75a63baad31080b464ad93697ab1503bbcb914a4240c751776fb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "869187dd-05cc-45da-af3b-a6a2c1c61430", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "8ecee4eb88b3ee1f07d44a4c698fea4f806983a07522519ccdb7b1b4b7a9258b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34867761-ca92-49f5-93a2-fae7653fc3e7", "node_type": "1", "metadata": {}, "hash": "f4f60ccd6e7c5355a4f4fecbf1375f8e636ff90739759aac85600bcacf9e053f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nManage Organizations\\n\u200b\\nOrganizations allow you to collaborate with your team. Besides their individual accounts, users of the PLANQK platform can also be associated with some organization, e.g. as an employee of a company. In that context, users might want to be able to, e.g., publish algorithms or services as well as execute jobs either as an individual or as part of such an organization.\\nIn the drop-down menu of your personal account in the top right corner you can select the section \\\"Organizations\\\".", "mimetype": "text/plain", "start_char_idx": 1023, "end_char_idx": 2043, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "34867761-ca92-49f5-93a2-fae7653fc3e7": {"__data__": {"id_": "34867761-ca92-49f5-93a2-fae7653fc3e7", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "f4cdb3d753a75a63baad31080b464ad93697ab1503bbcb914a4240c751776fb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e88d51f-3e8b-42a9-a2ac-719403f35fa6", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "f7d08074b3f25d0713c6ee3d96288752a17c7c9d3463bc715a69680252e15a07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93e67c8e-01ec-44c6-a2c2-be2a72b79900", "node_type": "1", "metadata": {}, "hash": "4417e70612b81e5d1f2e8ea1b1bfc7e7322fc77a719e2c6fbc38359715aa0f9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Besides the ones your account is already associated to, you also have the option to create a new organization, which requires a name and a billing address.\\nUnder the menu item \\\"Members\\\" you can easily add members to the organization and assign them one of multiple roles (similar to the roles associated to an algorithm or an implementation):\\nViewer: Can see the content of the organization, but cannot edit or create content.\\nMaintainer: Can create new content, edit existing content, but cannot delete content.\\nOwner: Can create, edit and delete hole content of the organization. Owner can add new members, assign them different roles, and can delete members. Of course, the owner can see the entire organization profile and edit it.\\nThe added member will receive an email invitation that must be confirmed.", "mimetype": "text/plain", "start_char_idx": 2044, "end_char_idx": 2860, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93e67c8e-01ec-44c6-a2c2-be2a72b79900": {"__data__": {"id_": "93e67c8e-01ec-44c6-a2c2-be2a72b79900", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f4895cc-44dd-43bb-885e-58bbac3cda04", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "f4cdb3d753a75a63baad31080b464ad93697ab1503bbcb914a4240c751776fb6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34867761-ca92-49f5-93a2-fae7653fc3e7", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}, "hash": "1751db84e233e82fad1730c3cd8e27e7891abfd7c15f8a17b7b3e6b432a4e122", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "After that, the member can see the organization in his account context drop-down menu.\\nSwitch Context between Personal Account and Organization\\n\u200b\\nAssuming you are a member of an organization, you should be aware of the\\nAccount Context\\nin the top left corner, right above the different sections whenever you are doing something on the platform.\\nNote\\n: When you are not a member of an organization you will not see the context-drop-down menu associated to it.\\nIMPORTANT\\nAs of now, after creating a new service, algorithm, etc. you are\\nNOT\\nable to change its context. So, before you do something new, be sure to have selected the correct context for the content you are about to create.\\nRefreshing your browser resets the context to your personal account.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nplanqk.json Reference\\nNext page\\nManage Access Tokens\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/manage-organizations.html\"\n}", "mimetype": "text/plain", "start_char_idx": 2861, "end_char_idx": 3896, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e9ae342-14cb-45ac-bd46-0c090894dfff": {"__data__": {"id_": "5e9ae342-14cb-45ac-bd46-0c090894dfff", "embedding": null, "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc", "node_type": "4", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99ae456d-79b6-433c-92bc-5fbe18061d49", "node_type": "1", "metadata": {}, "hash": "6c4f951575589a9a2799e980958ad4c704985b05e8764a93922c8cc377333eda", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"planqk.json Reference | PLANQK Docs\",\n  \"content\": \"planqk.json Reference | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1065, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "99ae456d-79b6-433c-92bc-5fbe18061d49": {"__data__": {"id_": "99ae456d-79b6-433c-92bc-5fbe18061d49", "embedding": null, "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc", "node_type": "4", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e9ae342-14cb-45ac-bd46-0c090894dfff", "node_type": "1", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d597937ae1ceeae6f35cb9ca61763533c0511e433457817d13f60790efe7c542", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e197ee7c-250f-48c7-a754-16dffa1d12ad", "node_type": "1", "metadata": {}, "hash": "c10a290037abd8df8fff01977c3ebc9c9b024e0dfd3be567a9ff61f1a524419b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nplanqk.json\\nReference\\n\u200b\\nThe\\nplanqk.json\\nfile contains your service configuration and is used by the PLANQK CLI to deploy and run your service.", "mimetype": "text/plain", "start_char_idx": 984, "end_char_idx": 1680, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e197ee7c-250f-48c7-a754-16dffa1d12ad": {"__data__": {"id_": "e197ee7c-250f-48c7-a754-16dffa1d12ad", "embedding": null, "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc", "node_type": "4", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "99ae456d-79b6-433c-92bc-5fbe18061d49", "node_type": "1", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "222de895a7630b8a959a29ed6f211236de1700998ed020b48250093b2b340214", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "330cac46-4de1-420b-9e42-e2d18f5cdc3f", "node_type": "1", "metadata": {}, "hash": "3d110199d808341bab465091f428b42bf9bc1ec4bee8ccc3922ec128c5664ab5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "json\\nfile contains your service configuration and is used by the PLANQK CLI to deploy and run your service. It will be generated automatically by the PLANQK CLI and must be located in the root folder of your project.\\nHere is an example containing all supported fields:\\njson\\n{\\n\\\"name\\\"\\n:\\n\\\"my-service\\\"\\n,\\n\\\"descriptionFile\\\"\\n:\\n\\\"README.md\\\"\\n,\\n\\\"resources\\\"\\n: {\\n\\\"cpu\\\"\\n:\\n2\\n,\\n\\\"memory\\\"\\n:\\n4\\n,\\n\\\"gpu\\\"\\n: {\\n\\\"type\\\"\\n:\\n\\\"NVIDIA_TESLA_T4\\\"\\n,\\n\\\"count\\\"\\n:\\n1\\n}\\n},\\n\\\"runtime\\\"\\n:\\n\\\"PYTHON_TEMPLATE\\\"\\n,\\n\\\"serviceId\\\"\\n:\\n\\\"99487f0b-21f0-4256-8335-5179d416dbb4\\\"\\n}\\nThe following properties are supported:\\nProperty\\nType\\nDescription\\nname\\nstring\\nRequired\\n.", "mimetype": "text/plain", "start_char_idx": 1572, "end_char_idx": 2259, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "330cac46-4de1-420b-9e42-e2d18f5cdc3f": {"__data__": {"id_": "330cac46-4de1-420b-9e42-e2d18f5cdc3f", "embedding": null, "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc", "node_type": "4", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e197ee7c-250f-48c7-a754-16dffa1d12ad", "node_type": "1", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "461f2ade5717181ead118a0cdb6f666aa8afdef3a5483bf58b9ae6e72f6ff73a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b543fb8-50c6-4bfc-9b6d-ffaef64f8726", "node_type": "1", "metadata": {}, "hash": "1d9ba325240ce292223fe7f09aac41514ef178fe340c338a7fb463ced277e9ad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The name of your service.\\ndescriptionFile\\nstring\\nThe name of a markdown file used as the description for your service. The file must be located in the root folder of your project.\\nresources\\nobject\\nRequired\\n. The resource configuration of your service.\\nresources.cpu\\nnumber\\nRequired\\n. The number of virtual CPU cores to allocate for your service.\\nresources.memory\\nnumber\\nRequired\\n. The amount of memory in GB to allocate for your service.\\nresources.gpu\\nobject\\nThe GPU configuration of your service.\\nresources.gpu.type\\nstring\\nThe type of GPU to allocate for your service. One of\\nNVIDIA_TESLA_T4\\nor\\nNVIDIA_TESLA_V100\\n.\\nresources.gpu.count\\nnumber\\nThe number of GPUs to allocate for your service.\\nruntime\\nstring\\nRequired\\n. The runtime to use for your service. Choose\\nPYTHON_TEMPLATE\\nto run quantum services based on our Python starter templates. Choose\\nDOCKER\\nto run custom docker images in any programming language.\\nserviceId\\nstring\\nReferences a deployed service.", "mimetype": "text/plain", "start_char_idx": 2260, "end_char_idx": 3258, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b543fb8-50c6-4bfc-9b6d-ffaef64f8726": {"__data__": {"id_": "5b543fb8-50c6-4bfc-9b6d-ffaef64f8726", "embedding": null, "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ed15960-b4db-4f00-8fcb-99aa259fe9fc", "node_type": "4", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "d41cb508cc273190826b8cfebb68c8164a2b92a350a2190e0694fdc5e877f571", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "330cac46-4de1-420b-9e42-e2d18f5cdc3f", "node_type": "1", "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}, "hash": "c14c111214fe82df6b44cfcd4eaac9b67030d80a7dd4a88f24fa9a815e99b2eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Gets automatically added on a successful deployment, i.e., after\\nplanqk up\\n.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nCLI Reference\\nNext page\\nManage Organizations\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/planqk-json-reference.html\"\n}", "mimetype": "text/plain", "start_char_idx": 3259, "end_char_idx": 3601, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de6a41f6-eaba-410f-b3f3-fc344bf64f16": {"__data__": {"id_": "de6a41f6-eaba-410f-b3f3-fc344bf64f16", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be143822-5c5e-431e-bd74-379598bbbf61", "node_type": "1", "metadata": {}, "hash": "4bf0cea781e79d23942f5af8a550fc8a009c701170135b3e01d36ba091cb4e94", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Accessing Quantum Backends | PLANQK Docs\",\n  \"content\": \"Accessing Quantum Backends | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1116, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be143822-5c5e-431e-bd74-379598bbbf61": {"__data__": {"id_": "be143822-5c5e-431e-bd74-379598bbbf61", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de6a41f6-eaba-410f-b3f3-fc344bf64f16", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "e0d9a5cf15baa79f05618fb50784e9b77c20d753770c5f6207e1706218b97028", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8", "node_type": "1", "metadata": {}, "hash": "096930b270fcd0514d508f92debf810189177e5b9d2c75c99761acc8294fa2a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nAccessing Quantum Backends\\n\u200b\\nThe PLANQK Quantum SDK provides an easy way to develop quantum code that runs on\\nquantum hardware and simulators supported\\nby the\\nPLANQK Platform\\n.\\nThe SDK supports both the\\nQiskit 1.3 SDK\\nand the\\nAmazon Braket SDK\\n, allowing you to choose your preferred framework for quantum programming:\\nQiskit: Access all gate-based quantum backends and simulators provided by PLANQK.", "mimetype": "text/plain", "start_char_idx": 1012, "end_char_idx": 1955, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8": {"__data__": {"id_": "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be143822-5c5e-431e-bd74-379598bbbf61", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "562cdec0697a1f393f0ec0666d19905ef8abcb5dbc03f61b5f9fded25f254053", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60ce164b-857f-4597-91d5-59e1b75b420b", "node_type": "1", "metadata": {}, "hash": "4fa0dbff15b48422a4e9369269f982ff5ea072d6bd0606ffe8dace568a34eaf0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nAmazon Braket SDK: Access all devices provided by PLANQK through AWS, such as the QuEra Aquila quantum device.\\nThis integration enables you to seamlessly adapt and reuse your existing Qiskit or Braket code within the PLANQK environment, maximizing productivity while working with the frameworks you are already accustomed to.\\nIf you are using\\nPennyLane\\nto implement your quantum machine learning algorithms, you can use the\\nSDK along with the PennyLane-Qiskit plugin\\nto run them on the quantum hardware provided by PLANQK.\\nInstallation\\n\u200b\\nYou need to have Python 3.11 or higher installed. The package is released on PyPI and can be installed via\\npip\\n:\\nbash\\npip\\ninstall\\n--upgrade\\nplanqk-quantum\\nTIP\\nEnsure that you have versions older than Qiskit SDK 1.3 uninstalled before installing the PLANQK Quantum SDK.", "mimetype": "text/plain", "start_char_idx": 1955, "end_char_idx": 2781, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60ce164b-857f-4597-91d5-59e1b75b420b": {"__data__": {"id_": "60ce164b-857f-4597-91d5-59e1b75b420b", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "10f0fb89b5632064fecb99880697b2cc182623fa84195b5a8f50cce0aa3fca68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22dff272-c3b1-44c2-a327-a3b8b78540ef", "node_type": "1", "metadata": {}, "hash": "f5401807ded8b23d1d6cc1165eced85cad036fb294d40de16f7d4b65319b65dc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The best practice is to create a new virtual environment and freshly install the SDK.\\nAfter installing the SDK, you can start using it in conjunction with your preferred quantum framework:\\nFollow the\\nUsing Qiskit\\nsection to begin creating quantum circuits and running them on supported devices through PLANQK.\\nFollow test\\nUsing Amazon Braket\\nsection for building circuits or Analog Hamiltonian Simulations and running them on devices provided by PLANQK.\\nAuthentication\\n\u200b\\nTo use the SDK, you need to authenticate using an access token. You may use your personal access token found on the PLANQK\\nwelcome page\\n, or you can generate dedicated\\naccess tokens\\n.\\nAn access token can be set in two ways:\\nAutomatically, by logging in through the\\nPLANQK CLI\\n. The command to login via CLI is\\nplanqk login -t <your_access_token>\\n. This method will automatically inject the access token when you instantiate the\\nPlanqkQuantumProvider\\nor\\nPlanqkBraketProvider\\nclass.", "mimetype": "text/plain", "start_char_idx": 2782, "end_char_idx": 3757, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22dff272-c3b1-44c2-a327-a3b8b78540ef": {"__data__": {"id_": "22dff272-c3b1-44c2-a327-a3b8b78540ef", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60ce164b-857f-4597-91d5-59e1b75b420b", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "7214847911b4d03bf79f46e0a4c5cfe207795b9c3dbc9d651ca8c597d3b955b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c83d2d10-8812-410e-8d04-59b690abf466", "node_type": "1", "metadata": {}, "hash": "2c152c03fffac069fe923a38566c7dab12a38ca01bb6c23fbe4561d799f7df62", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If you want to log in with your organization you need to additionally execute\\nplanqk set-context\\nand select the organization.\\nExplicitly, during instantiation of the\\nPlanqkQuantumProvider\\nor\\nPlanqkBraketProvider\\nclass. This method overrides any access token that has been automatically injected through the PLANQK CLI login. You can optionally pass the organization id as a parameter, if you want to execute your circuit using your organization's account.\\nIf the access token is not set, is invalid, or has expired, an\\nInvalidAccessTokenError\\nis thrown. You need to generate a new token and log-in again.\\nUsing Qiskit\\n\u200b\\nIn your Python code you can access the PLANQK quantum backends through the\\nPlanqkQuantumProvider\\nclass.", "mimetype": "text/plain", "start_char_idx": 3758, "end_char_idx": 4496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c83d2d10-8812-410e-8d04-59b690abf466": {"__data__": {"id_": "c83d2d10-8812-410e-8d04-59b690abf466", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22dff272-c3b1-44c2-a327-a3b8b78540ef", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "43f15a34372bb8fe6a901fbfdc20f6c8f4963f35374a5caaf4ea8c3e3aeb63e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd", "node_type": "1", "metadata": {}, "hash": "d845045da3ba614d45483b50d690036a3ef3867bebf4fb51b7012cf0308dd7f7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Import the class and instantiate it as shown below:\\npython\\nfrom\\nplanqk.qiskit\\nimport\\nPlanqkQuantumProvider\\nIf you are already logged in with the\\nPLANQK CLI\\nyou can create the provider object without any parameters:\\npython\\nprovider\\n=\\nPlanqkQuantumProvider()\\nAlternatively, you can also create the provider object by passing a personal access token as a parameter:\\npython\\nprovider\\n=\\nPlanqkQuantumProvider(\\naccess_token\\n=\\n\\\"YOUR_PERSONAL_ACCESS_TOKEN_HERE\\\"\\n)\\nIf you want to log in with your organization, you can additionally pass the organization id as a parameter. The organization id can be found in the organization settings on the PLANQK Platform:\\npython\\nprovider\\n=\\nPlanqkQuantumProvider(\\norganization_id\\n=\\n\\\"YOUR_ORGANIZATION_ID_HERE\\\"\\n,\\naccess_token\\n=\\n\\\"...\\\"\\n)\\nUse the Provider Class\\n\u200b\\nAfter you have created the provider object, you can list all backends supported by PLANQK and select the one you want to use.", "mimetype": "text/plain", "start_char_idx": 4497, "end_char_idx": 5451, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd": {"__data__": {"id_": "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c83d2d10-8812-410e-8d04-59b690abf466", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "a0a03af2e6f77681489c39be1e55937725ec62e5d8e2c6dc3b851033de4dc014", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f529ddeb-5375-4cce-b311-a6790ab1dc1f", "node_type": "1", "metadata": {}, "hash": "d42df619359db486cdb69faa4350e1b782807baf0257ffb825ce04a091c437ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The available backends and their ids can be also found\\nhere\\n:\\npython\\n# List all available PLANQK quantum backends\\nbackends\\n=\\nprovider.backends()\\n# Select a certain backend\\nbackend\\n=\\nprovider.get_backend(\\n\\\"azure.ionq.simulator\\\"\\n)\\nTIP\\nTo access other QPUs, either you or your organization must have payment information added to your account. To upgrade your account, go to your\\nAccount Settings\\n, click the\\nUpgrade\\nbutton, and follow the prompts to enter your payment details.\\nExecute a Quantum Circuit\\n\u200b\\nNow you can execute your Qiskit circuit on the selected backend, retrieve its\\njob\\nobject, retrieve its results, or cancel it. The full example would look like this:\\npython\\nfrom\\nplanqk.qiskit\\nimport\\nPlanqkQuantumProvider\\nfrom\\nqiskit\\nimport\\nQuantumCircuit, transpile\\nprovider\\n=\\nPlanqkQuantumProvider()\\nbackend\\n=\\nprovider.get_backend(\\n\\\"azure.ionq.", "mimetype": "text/plain", "start_char_idx": 5452, "end_char_idx": 6342, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f529ddeb-5375-4cce-b311-a6790ab1dc1f": {"__data__": {"id_": "f529ddeb-5375-4cce-b311-a6790ab1dc1f", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "35e9a46cb1033259056370b6ed4ceb3c2c0d836b04460f26df80236dbbff3e12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15c1a737-f5fd-4da0-aee9-7ee6cf864eea", "node_type": "1", "metadata": {}, "hash": "6d49c3092640ea51b7c6f7d9ec5725d6e24158994a7ae859dc8dcbe27ac41bd4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "get_backend(\\n\\\"azure.ionq.simulator\\\"\\n)\\n# Create a Qiskit circuit\\ncircuit\\n=\\nQuantumCircuit(\\n3\\n,\\n3\\n)\\ncircuit.h(\\n0\\n)\\ncircuit.cx(\\n0\\n,\\n1\\n)\\ncircuit.cx(\\n1\\n,\\n2\\n)\\ncircuit.measure(\\nrange\\n(\\n3\\n),\\nrange\\n(\\n3\\n))\\ncircuit\\n=\\ntranspile(circuit, backend)\\njob\\n=\\nbackend.run(circuit,\\nshots\\n=\\n100\\n)\\n# Monitor job status and get results\\nprint\\n(\\nf\\n\\\"Status:\\n{\\njob.status()\\n}\\n\\\"\\n)\\nprint\\n(\\nf\\n\\\"Result:\\n{\\njob.result()\\n}\\n\\\"\\n)\\nIMPORTANT\\nExecuting your quantum circuits or programs on PLANQK may lead to execution costs depending on selected backend and number of shots.", "mimetype": "text/plain", "start_char_idx": 6315, "end_char_idx": 6918, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "15c1a737-f5fd-4da0-aee9-7ee6cf864eea": {"__data__": {"id_": "15c1a737-f5fd-4da0-aee9-7ee6cf864eea", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f529ddeb-5375-4cce-b311-a6790ab1dc1f", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9c366eaa349a6222ae64bfa002d318684cabea0a56543c6915657b705a92fa49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed343f4d-713a-475d-a14d-edea546a84c6", "node_type": "1", "metadata": {}, "hash": "ac1a425434584198f46b4e0c6349ce2e2192e60637942de13fc69b86297e949d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Please find an overview about the costs for each backend\\non our pricing page\\n.\\nRetrieving Quantum Jobs\\n\u200b\\nDue to queuing at the quantum provider, job execution may take hours or even days. To retrieve your job later, you can use the\\nretrieve_job\\nfunction provided by the backend:\\npython\\nprovider\\n=\\nPlanqkQuantumProvider()\\nbackend\\n=\\nprovider.get_backend(\\n\\\"azure.ionq.simulator\\\"\\n)\\n# Retrieve the job through its id\\njob\\n=\\nbackend.retrieve_job(\\n\\\"6ac422ad-c854-4af4-b37a-efabb159d92e\\\"\\n)\\nYou can also get an overview of all your jobs by executing\\nprovider.jobs()\\nor by visiting the\\nQuantum Jobs\\npage.\\nUsing Amazon Braket\\n\u200b\\nIn your Python code you can access the PLANQK quantum backends through the\\nPlanqkBraketProvider\\nclass. We refer to these backends as\\ndevices\\nin the following to adhere to the Braket SDK naming conventions.", "mimetype": "text/plain", "start_char_idx": 6919, "end_char_idx": 7778, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed343f4d-713a-475d-a14d-edea546a84c6": {"__data__": {"id_": "ed343f4d-713a-475d-a14d-edea546a84c6", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15c1a737-f5fd-4da0-aee9-7ee6cf864eea", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "503263c10895af050753bf270f8c19c02f066884022c39d937a1da31022c7130", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d03b2af9-c409-4096-a06e-cb2930365c0f", "node_type": "1", "metadata": {}, "hash": "bae4caab2126f220a365c9e5939ad793e0efdfb66e25554e3b04b782adce1c22", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Import the class and instantiate it as shown below:\\npython\\nfrom\\nplanqk\\nimport\\nPlanqkBraketProvider\\nIf you are already logged in with the\\nPLANQK CLI\\nyou can create the provider object without any parameters:\\npython\\nprovider\\n=\\nPlanqkBraketProvider()\\nAlternatively, you can also create the provider object by passing your PLANQK\\npersonal access token\\n:\\npython\\nprovider\\n=\\nPlanqkBraketProvider(\\naccess_token\\n=\\n\\\"YOUR_PERSONAL_ACCESS_TOKEN_HERE\\\"\\n)\\nIf you want to log in with your organization, you can additionally pass the organization id as a parameter.", "mimetype": "text/plain", "start_char_idx": 7779, "end_char_idx": 8353, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d03b2af9-c409-4096-a06e-cb2930365c0f": {"__data__": {"id_": "d03b2af9-c409-4096-a06e-cb2930365c0f", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed343f4d-713a-475d-a14d-edea546a84c6", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "892483278d11649ac6cd2f60a6a8cfaaf9cf9e5f130b6cf6d3fc515c76d0de75", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f029def-8a14-4b87-b19c-f81a4e3a8b0b", "node_type": "1", "metadata": {}, "hash": "28a872eb6e97833b0cb38cc924191473d2948a5c588348bf9ef82b3ccade251b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The organization id can be found in the organization settings on the PLANQK Platform:\\npython\\nprovider\\n=\\nPlanqkBraketProvider(\\norganization_id\\n=\\n\\\"YOUR_ORGANIZATION_ID_HERE\\\"\\n,\\naccess_token\\n=\\n\\\"...\\\"\\n)\\nUse the Provider Class\\n\u200b\\nAfter you have created the provider object, you can list all devices (backends) provided by the PLANQK Platform that can be accessed through Braket.\\npython\\n# List all available PLANQK quantum devices\\ndevices\\n=\\nprovider.devices()\\n# Select a certain device\\ndevice\\n=\\nprovider.get_device(\\n\\\"aws.ionq.forte\\\"\\n)\\nTIP\\nTo access other QPUs, either you or your organization must have payment information added to your account. To upgrade your account, go to your\\nAccount Settings\\n, click the\\nUpgrade\\nbutton, and follow the prompts to enter your payment details.\\nWorking with Braket Devices\\n\u200b\\nNow you can execute your Braket circuit on the selected device, retrieve its\\ntask\\nobject, retrieve its results, cancel it etc.", "mimetype": "text/plain", "start_char_idx": 8354, "end_char_idx": 9325, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f029def-8a14-4b87-b19c-f81a4e3a8b0b": {"__data__": {"id_": "8f029def-8a14-4b87-b19c-f81a4e3a8b0b", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d03b2af9-c409-4096-a06e-cb2930365c0f", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "8f6d558beb1cc913f0596849556a83d5427fcf6b462a2f6b069fab47452110db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e425670-fb3d-4e56-b13a-1b35e244b6e8", "node_type": "1", "metadata": {}, "hash": "b37d5fd491c4456688c02e5f690ab82911f08c58df2958ef77c5f574762fd64c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The full example would look like this:\\npython\\nfrom\\nbraket.circuits\\nimport\\nCircuit\\nfrom\\nplanqk\\nimport\\nPlanqkBraketProvider\\nfrom\\nplanqk.braket.planqk_quantum_task\\nimport\\nPlanqkAwsQuantumTask\\n# Select the IonQ Forte device\\ndevice\\n=\\nPlanqkBraketProvider().get_device(\\n\\\"aws.ionq.forte\\\"\\n)\\n# Create a Braket circuit\\ncircuit\\n=\\nCircuit().h(\\n0\\n).cnot(\\n0\\n,\\n1\\n).cnot(\\n1\\n,\\n2\\n)\\n# Execute the circuit with 100 shots\\ntask\\n=\\ndevice.run(circuit,\\n100\\n)\\n# Monitor task status and get results\\nprint\\n(\\nf\\n\\\"Status:\\n{\\ntask.state()\\n}\\n)\\nprint(f\\\"\\nResult: {task.result()})\\nTo execute a task on the QuEra Aquila device,", "mimetype": "text/plain", "start_char_idx": 9326, "end_char_idx": 9970, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e425670-fb3d-4e56-b13a-1b35e244b6e8": {"__data__": {"id_": "5e425670-fb3d-4e56-b13a-1b35e244b6e8", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f029def-8a14-4b87-b19c-f81a4e3a8b0b", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "7d6e928c8997d20ea5237cb9db62bc725dbe5301be0ce70f1ff9de3be47d4b6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07", "node_type": "1", "metadata": {}, "hash": "d9f4ca5b463decb92c9c34d0dff1c483acbb61de204958a6828bb81d0653d677", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "result()})\\nTo execute a task on the QuEra Aquila device, you'll need to create an\\nAnalog Hamiltonian Simulation (AHS) program\\nand discretize it according to the device specifications. This is described in detail using the Maximum Independent Set Problem in our\\nQuera Aquila tutorial\\n.\\nRetrieving Braket Tasks\\n\u200b\\nTo retrieve a task you ran earlier, note down its ID and create a PlanqkAwsQuantumTask object by providing the ID.", "mimetype": "text/plain", "start_char_idx": 9913, "end_char_idx": 10346, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07": {"__data__": {"id_": "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e425670-fb3d-4e56-b13a-1b35e244b6e8", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "dfda3b82f8860108f263a09e7c61d7d216c7d0b69b2db8e2e8775b89a6a43d8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "242ec554-0b84-44e0-b1ed-e396f003f1ca", "node_type": "1", "metadata": {}, "hash": "9578ee8b633929db80c9a6fdcd03eebefe3c18a1fe78c126c726b88378887ca9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Optionally, you can also provide an access token and an organization id.\\npython\\n# Submit the program to the device\\ntask\\n=\\ndevice.run(circuit,\\n100\\n)\\n# Get the task ID for future reference\\nprint\\n(\\n\\\"Task ID:\\\"\\n, task.id)\\n# Example Output: Task ID: 6ac422ad-c854-4af4-b37a-efabb159d92e\\n# Retrieve the task using its ID\\ntask\\n=\\nPlanqkAwsQuantumTask(\\n\\\"6ac422ad-c854-4af4-b37a-efabb159d92e\\\"\\n)\\nYou can also get an overview of your tasks by visiting the\\nQuantum Jobs\\npage.", "mimetype": "text/plain", "start_char_idx": 10347, "end_char_idx": 10834, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "242ec554-0b84-44e0-b1ed-e396f003f1ca": {"__data__": {"id_": "242ec554-0b84-44e0-b1ed-e396f003f1ca", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "6043567311b68506372deef1829e70d0bf6ca17954fa1d1fe175ebbb2532b44e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5", "node_type": "1", "metadata": {}, "hash": "177dd5044058dbe5fbaa685c99911a8dd88aa80aebc759148467fd8f901724bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Note that your tasks are referred to as \u201cjobs\u201d on this page.\\nSupported Operations\\n\u200b\\nThis section provides an overview of the most important classes and methods in the SDK.\\nPlanqkQuantumProvider\\n\u200b\\nThe\\nPlanqkQuantumProvider\\nclass allows access to all gate-based backends via Qiskit.\\nMethod\\nDescription\\nbackends()\\nThis method returns a list of ids of backends supported by PLANQK. Please note that currently, backend filtering is not supported.\\nget_backend(backend_id)\\nThis method returns a single backend that matches the specified ID.", "mimetype": "text/plain", "start_char_idx": 10835, "end_char_idx": 11382, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5": {"__data__": {"id_": "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "242ec554-0b84-44e0-b1ed-e396f003f1ca", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "80615ddc7ad9ac88a89fcbb08b04699170ad79e389407da4bd18d59d92099b4f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0826d36a-04f7-4fe3-a4c3-4903e7644c03", "node_type": "1", "metadata": {}, "hash": "d245b8566a383d0a40e9ecc561eb930090bc74bc918b0c11c66a1e13a9b1e78e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If the backend cannot be found, a\\nPlanqkClientError\\nis thrown.\\njobs()\\nThis method retrieves a list of all jobs created by the user, sorted by their creation date with the newest jobs listed first.\\nIf you specify\\nazure.ionq.simulator\\nas the backend ID, for example, by calling\\nprovider.get_backend(\\\"azure.ionq.simulator\\\")\\n, a\\nPlanqkQiskitBackend\\nis returned.\\nQiskit Backends and Jobs\\n\u200b\\nThe\\nPlanqkQiskitBackend\\nclass represents a\\nQiskit Backend\\n. It provides information about quantum backends (e.g., number of qubits, qubit connectivity, etc.) and enables you to run quantum circuits on the backend. Please note that currently, only circuits with gate-based operations are supported while pulse-based operations are not supported.\\nThe\\nPlanqkQiskitBackend\\nclass supports the following methods:\\nMethod\\nDescription\\nconfiguration()\\nReturns the backend configuration data.", "mimetype": "text/plain", "start_char_idx": 11383, "end_char_idx": 12276, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0826d36a-04f7-4fe3-a4c3-4903e7644c03": {"__data__": {"id_": "0826d36a-04f7-4fe3-a4c3-4903e7644c03", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "034cee79cae4a3017902add6965445b26507215e93a2a56901fa898011dd1424", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0996652b-8eb2-4bec-b3d1-befe803eab93", "node_type": "1", "metadata": {}, "hash": "d5b77e4be2407aa087fc65d83a0dc662401c8b1c7a3854a3a88f9cf259203869", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This method is included for compatibility with older versions of Qiskit.\\nrun(circuit, shots)\\nExecutes a single circuit on the backend as a job (multiple circuits are currently not supported) and returns a\\nPlanqkQiskitJob\\n. You also need to specify the number of shots. The minimum and maximum number of supported shots differ for each backend and can be obtained from the backend properties\\nmin_shots\\nand\\nmax_shots\\n, respectively. A\\nPlanqkClientError\\nis thrown if the job input is invalid or if the designated backend is offline and does not accept new jobs in the moment.\\nretrieve_job(job_id)\\nRetrieves a job from the backend using the provided id.", "mimetype": "text/plain", "start_char_idx": 12277, "end_char_idx": 12938, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0996652b-8eb2-4bec-b3d1-befe803eab93": {"__data__": {"id_": "0996652b-8eb2-4bec-b3d1-befe803eab93", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0826d36a-04f7-4fe3-a4c3-4903e7644c03", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "d0be7d78825314b7b8da66f5b663c676273eabcc4720872971ac1aa1dabb3828", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "226b832f-d6e9-4359-827d-6aaa677d81e1", "node_type": "1", "metadata": {}, "hash": "6c74465b07964a58eb903ff3f21ee54ece0ab7447c24ade8d53dc74467ae0738", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If a job cannot be found a\\nPlanqkClientError\\nis thrown.\\nThis example shows how to run a circuit on a backend:\\npython\\n# Select a certain backend\\nbackend\\n=\\nprovider.get_backend(\\n\\\"azure.ionq.simulator\\\"\\n)\\n# Create a circuit\\ncircuit\\n=\\nQuantumCircuit(\\n2\\n,\\n2\\n)\\ncircuit.h(\\n0\\n)\\ncircuit.cx(\\n0\\n,\\n1\\n)\\ncircuit.measure(\\nrange\\n(\\n2\\n),\\nrange\\n(\\n2\\n))\\n# Run the circuit on the backend\\njob\\n=\\nbackend.run(circuit,\\nshots\\n=\\n10\\n)\\n# Retrieve a job by id\\njob\\n=\\nbackend.retrieve_job(\\n\\\"6ac422ad-c854-4af4-b37a-efabb159d92e\\\"\\n)\\nQiskit Jobs & Results\\n\u200b\\nThe class\\nPlanqkQiskitJob\\nrepresents a\\nQiskit Job\\n. It provides status information about a job (e.g., job id, status, etc.)", "mimetype": "text/plain", "start_char_idx": 12939, "end_char_idx": 13643, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "226b832f-d6e9-4359-827d-6aaa677d81e1": {"__data__": {"id_": "226b832f-d6e9-4359-827d-6aaa677d81e1", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0996652b-8eb2-4bec-b3d1-befe803eab93", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "27cd4ff7f4f6b2b9850c9b17ee74875a8263844a795e7f5fb22b08c73974a8f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "798ebf3c-d869-4ae8-ba38-821f7fa938b1", "node_type": "1", "metadata": {}, "hash": "7cc566cead43b44f66a2c43144231bb8d278925536b8ed9454607f633ac148e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "It provides status information about a job (e.g., job id, status, etc.) and enables you to access the job result as soon as the job execution has completed successfully.\\nMethods\\n\u200b\\nMethod\\nDescription\\nstatus()\\nReturns the status of the job. The\\nQiskit job states\\nare:\\nINITIALIZING\\n,\\nQUEUED\\n,\\nRUNNING\\n,\\nCANCELLED\\n,\\nDONE\\n,\\nERROR\\n.\\nresult()\\nReturns the result of the job. It blocks until the job execution has completed successfully. If the job execution has failed, a\\nPlanqkClientError\\nis thrown indicating that the job result is not available.\\ncancel()\\nCancels the job execution. If the job execution has already completed or if it has failed, this method has no effect.\\nResults\\n\u200b\\nThe type of result depends on the backend where the job was executed. Currently, only measurement result histograms are supported. The histogram is represented as a dictionary where the keys are the measured qubit states and the values are the number of occurrences.", "mimetype": "text/plain", "start_char_idx": 13572, "end_char_idx": 14545, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "798ebf3c-d869-4ae8-ba38-821f7fa938b1": {"__data__": {"id_": "798ebf3c-d869-4ae8-ba38-821f7fa938b1", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "226b832f-d6e9-4359-827d-6aaa677d81e1", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "dfe12ed62d0c15e888246313da2c2b81f06ad31722f7954764c7ca69039bc8a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90fff491-109e-467b-9019-f55b95b26d46", "node_type": "1", "metadata": {}, "hash": "996d51963239cc2d5e3b6edee5a3b8e28306ba5f83f7471bea8f869c1ff5d481", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The measured qubit states are represented as bit-strings where the qubit farthest to the right is the most significant and has the highest index (little-endian). If supported by the backend, the result also contains the memory of the job execution, i.e., the qubit state of each individual shot.\\nAttributes\\n\u200b\\nAttribute\\nDescription\\ncounts\\nReturns the histogram of the job result as a JSON dict.\\nmemory\\nReturns the memory as a JSON dict.\\nHere is an example of how to access these attributes:\\npython\\nresult\\n=\\njob.result()\\nprint\\n(result.counts)\\n# Expected output, e.g., {\\\"11\\\": 6, \\\"00\\\": 4}\\nprint\\n(result.memory)\\n# Expected output, e.g., ['00', '11', '11', '00', '11', '00', '11', '11', '00', '11']\\nPlanqkBraketProvider\\n\u200b\\nThe\\nPlanqkBraketProvider\\nclass allows access to all backends provided through AWS.", "mimetype": "text/plain", "start_char_idx": 14546, "end_char_idx": 15372, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90fff491-109e-467b-9019-f55b95b26d46": {"__data__": {"id_": "90fff491-109e-467b-9019-f55b95b26d46", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "798ebf3c-d869-4ae8-ba38-821f7fa938b1", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "d6331ea4ed0023904edce8ae02df43077734a2ecf70fba1e50ff439baf22fa4c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1fc8580-9bef-40fd-b200-9ae280024783", "node_type": "1", "metadata": {}, "hash": "12afa51d99fb336d7c6c6d4fd8262507b184be98af6023e47fe2e8ec16b1d4ad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This is an overview of the available methods:\\nMethod\\nDescription\\ndevices()\\nThis method returns a list of ids of the devices supported by PLANQK through Braket.\\nget_device(device_id)\\nThis method returns a single device that matches the specified ID. If the backend cannot be found, a\\nPlanqkClientError\\nis thrown.\\nIf you specify\\naws.ionq.forte\\nas the backend ID, for example, by calling\\nprovider.get_device(\\\"aws.ionq.forte\\\")\\n, a\\nPlanqkAwsDevice\\nis returned.\\nBraket Devices and Tasks\\n\u200b\\nThe\\nPlanqkAwsDevice\\nclass represents an\\nAwsDevice\\nand therefore provides the same properties and methods.", "mimetype": "text/plain", "start_char_idx": 15373, "end_char_idx": 15985, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1fc8580-9bef-40fd-b200-9ae280024783": {"__data__": {"id_": "a1fc8580-9bef-40fd-b200-9ae280024783", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90fff491-109e-467b-9019-f55b95b26d46", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "050806d40af57b1a5f2378ec70218adbb415b75a4afa40dd843a19d61eccac9a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2dc587f-6d1b-479b-bfdb-ba1826be763a", "node_type": "1", "metadata": {}, "hash": "20e56ba3d6bc7e56912991d1c99edd2d5813ce4956aff6f7e5b460cba74ee76b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Below are the key methods and properties:\\nProperty / Method\\nDescription\\nstatus\\nRetrieves the current status of the device.\\nis_available\\nReturns\\ntrue\\nif the device is online and ready to process tasks.\\nproperties\\nProvides the current properties of the device.\\nrun(task_specification, shots)\\nExecutes a Braket circuit or an Analog Hamiltonian Simulation program on PLANQK (batch executions are not currently supported) and returns a\\nPlanqkAwsQuantumTask\\n. You can specify the number of shots to perform; if not specified, 1000 shots are executed by default. A\\nPlanqkClientError\\nis thrown if the task input is invalid or if the device is offline and unable to accept new jobs.\\nTasks & Results\\n\u200b\\nThe\\nPlanqkAwsQuantumTask\\nclass is a representation of an\\nAwsQuantumTask\\n.", "mimetype": "text/plain", "start_char_idx": 15986, "end_char_idx": 16774, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2dc587f-6d1b-479b-bfdb-ba1826be763a": {"__data__": {"id_": "f2dc587f-6d1b-479b-bfdb-ba1826be763a", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1fc8580-9bef-40fd-b200-9ae280024783", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "dd6d1f7038b84ffb75b1b45abcc362e4e63032bef04a2985d34f635cba5d597d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7a9fbc7-766e-4ab6-8d47-4f01b2597136", "node_type": "1", "metadata": {}, "hash": "166b5dd579e793c1eab2568723da694bc67c5dec08e0e2abd0f82d9e299ecc0b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This class provides essential status information about a task, such as its ID, current status, and allows access to its results once the execution is completed successfully.\\nYou can obtain a\\nPlanqkAwsQuantumTask\\nobject directly from the\\nrun\\nfunction of the\\nPlanqkAwsDevice\\n. Alternatively, if you need to retrieve a task later, you can create a\\nPlanqkAwsQuantumTask\\nobject by specifying the task ID.", "mimetype": "text/plain", "start_char_idx": 16775, "end_char_idx": 17183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7a9fbc7-766e-4ab6-8d47-4f01b2597136": {"__data__": {"id_": "c7a9fbc7-766e-4ab6-8d47-4f01b2597136", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2dc587f-6d1b-479b-bfdb-ba1826be763a", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "e6b6e5c9cbf7bf22fc97b4aef7330a2118b2cc33539f451ad112b70f99a3d3f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96e2b51f-d02b-4bab-9b14-b166ecd5813b", "node_type": "1", "metadata": {}, "hash": "331f133a7793465ff139ba437880ac5d868306f23f428a5f17215ba91f0d87df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For example, to retrieve a task with the ID\\n123e4567-e89b-42d3-a456-556642440000\\n, you would use:\\npython\\ntask\\n=\\nPlanqkAwsQuantumTask(\\ntask_id\\n=\\n\\\"123e4567-e89b-42d3-a456-556642440000\\\"\\n)\\nIf you are not logged in through the PLANQK CLI, you must also provide your access token, and optionally, your organization ID.\\npython\\nPlanqkAwsQuantumTask(\\ntask_id\\n=\\n\\\"123e4567-e89b...\\\"\\n,\\naccess_token\\n=\\n\\\"your_access_token\\\"\\n,\\norganization_id\\n=\\n\\\"your_organization_id\\\"\\n)\\nMethods\\n\u200b\\nMethod\\nDescription\\nstatus()\\nReturns the current status of the task, which could be\\nQUEUED\\n,\\nRUNNING\\n,\\nCANCELLED\\n,\\nCOMPLETED\\n, or\\nFAILED\\n.\\nresult()\\nReturns the execution result of the task. This method blocks until the task execution completes successfully.", "mimetype": "text/plain", "start_char_idx": 17184, "end_char_idx": 17954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96e2b51f-d02b-4bab-9b14-b166ecd5813b": {"__data__": {"id_": "96e2b51f-d02b-4bab-9b14-b166ecd5813b", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7a9fbc7-766e-4ab6-8d47-4f01b2597136", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "f9a589b74ee9c0f24482e547a30a75678dbccac16ccfcda57bb9fae6975e1c86", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c47cb362-05af-43b1-b443-a3bc94edc33d", "node_type": "1", "metadata": {}, "hash": "cc204c890ce2e9cdecdd62b5dd40a2726ee9a429b36160c9c251328533122165", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This method blocks until the task execution completes successfully. If the task fails, a\\nPlanqkClientError\\nis thrown, indicating that the result is unavailable.\\ncancel()\\nCancels the task execution. If the task has already completed or failed, this method has no effect.\\nResults\\n\u200b\\nIf you execute a Braket circuit the result object is of type\\nGateModelQuantumTaskResult\\n. For\\nAnalogHamiltonianSimulationQuantumTaskResult\\n. Both result classes include the shot measurements from the execution.\\nA\\nGateModelQuantumTaskResult\\ncontains for instance the following properties:\\npython\\nresult\\n=\\ntask.result()\\nprint\\n(result.measurement_counts)\\n# Expected output, e.g., Counter({'111': 2, '000': 1})\\nprint\\n(result.measurements)\\n# Expected output [[0 0 0][1 1 1][1 1 1]]\\nPennyLane Integration\\n\u200b\\nTo use the SDK with PennyLane,", "mimetype": "text/plain", "start_char_idx": 17887, "end_char_idx": 18725, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c47cb362-05af-43b1-b443-a3bc94edc33d": {"__data__": {"id_": "c47cb362-05af-43b1-b443-a3bc94edc33d", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96e2b51f-d02b-4bab-9b14-b166ecd5813b", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "89f7486c30c736875cc973d5cf264f4200e937668f7a048a171e229735bed960", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b53ab24c-4e8c-4904-b3c6-705f437d21fc", "node_type": "1", "metadata": {}, "hash": "6d6f98fd20e469b26ba736746b60f60c94d758a3090c5f6b68898b7f8540826f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "you need to install the\\nPennyLane-Qiskit plugin\\nby adding the\\npennylane-qiskit\\npackage to your Python project dependencies, e.g., by running\\npip install pennylane-qiskit==0.36\\n.\\nIMPORTANT\\nCurrently, only\\npennylane\\nand\\npennylane-qiskit\\npackages version 0.36.0 are supported.\\nTo execute a PennyLane circuit using a PLANQK backend, first, retrieve the desired backend using the\\nPlanqkQuantumProvider\\n.\\nThen, create a\\nqiskit.remote\\ndevice and pass the PLANQK backend to it.\\nThe following example shows how to create a remove device using the\\nazure.ionq.simulator\\nbackend:\\npython\\nprovider\\n=\\nPlanqkQuantumProvider()\\nbackend\\n=\\nprovider.get_backend(\\n\\\"azure.ionq.simulator\\\"\\n)\\ndevice\\n=\\nqml.device(\\n'qiskit.remote'\\n,\\nwires\\n=\\n2\\n,\\nbackend\\n=\\nbackend,", "mimetype": "text/plain", "start_char_idx": 18726, "end_char_idx": 19506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b53ab24c-4e8c-4904-b3c6-705f437d21fc": {"__data__": {"id_": "b53ab24c-4e8c-4904-b3c6-705f437d21fc", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "534d6b09-3243-4745-8ffc-9500e1bba1f0", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "9d279304cb1f1ee6d95ac6c740cb7f38756864df0305271e3477967c183c7615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c47cb362-05af-43b1-b443-a3bc94edc33d", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}, "hash": "63949ea532be10f4b6eb9f9636524af0f67d821d8f7e62ad1e58862aea415da7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "remote'\\n,\\nwires\\n=\\n2\\n,\\nbackend\\n=\\nbackend,\\nshots\\n=\\n100\\n)\\n@qml.qnode\\n(device)\\ndef\\ncircuit\\n():\\nqml.Hadamard(\\nwires\\n=\\n0\\n)\\nqml.CNOT(\\nwires\\n=\\n[\\n0\\n,\\n1\\n])\\nreturn\\nqml.sample(qml.PauliZ(\\n0\\n)), qml.sample(qml.PauliZ(\\n1\\n))\\nresult\\n=\\ncircuit()\\nWhat's next?\\n\u200b\\nSee our supported\\nquantum backends and simulators\\n.\\nCheckout how to create your first\\nPLANQK Service project\\n.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nAvailable Backends\\nNext page\\nService SDK\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/sdk-reference.html\"\n}", "mimetype": "text/plain", "start_char_idx": 19458, "end_char_idx": 20111, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eecb45fe-0882-4e39-b4a3-d932e8ddc2a9": {"__data__": {"id_": "eecb45fe-0882-4e39-b4a3-d932e8ddc2a9", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "hash": "d2e2bf3a561cf46d80b12c4e62d453881e52bda6b195f3682a73a52a0c5d8e36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e", "node_type": "1", "metadata": {}, "hash": "3a4596ae137aaebc4d50f9494a857a2a816caf91b3d45cc6a3bb92e587286aac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Introduction | PLANQK Docs\",\n  \"content\": \"Introduction | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1105, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e": {"__data__": {"id_": "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "hash": "d2e2bf3a561cf46d80b12c4e62d453881e52bda6b195f3682a73a52a0c5d8e36", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eecb45fe-0882-4e39-b4a3-d932e8ddc2a9", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "hash": "810bf5e41b649cbdb5517bdbf4c58511b7aa2efb2ffb6ce6bd2a513a64b4e6de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c8f740b-eff5-40e1-90ab-fd8761ed53f4", "node_type": "1", "metadata": {}, "hash": "23e6ee06f1a1aa7b37c624b18fef912f56149fab0535c9da10d60889505c7408", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nIntroduction\\n\u200b\\nImplementations are hosted as Git repositories, which means that version control and collaboration are core elements of PLANQK.", "mimetype": "text/plain", "start_char_idx": 1007, "end_char_idx": 1659, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2c8f740b-eff5-40e1-90ab-fd8761ed53f4": {"__data__": {"id_": "2c8f740b-eff5-40e1-90ab-fd8761ed53f4", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "30bcef86-6ac1-4e49-a995-81cf5e30cb7d", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "hash": "d2e2bf3a561cf46d80b12c4e62d453881e52bda6b195f3682a73a52a0c5d8e36", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}, "hash": "7f3c4d62541000bdb85c3cddd53d0a15ca8064b664b5abc9976e5d5ad7348f8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "are hosted as Git repositories, which means that version control and collaboration are core elements of PLANQK. In a nutshell, an implementation (also known as a repo or repository) is a place where code and assets can be stored to back up your work, share it with the community, and work in a team.\\nIn these pages, you will go over the basics of getting started with Git and interacting with implementations on PLANQK.\\nWhat's next?\\n\u200b\\nGetting Started\\nImplementation Settings\\nCreate a PLANQK Service\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nManage Quantum Jobs\\nNext page\\nGetting Started\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/implementations/introduction.html\"\n}", "mimetype": "text/plain", "start_char_idx": 1548, "end_char_idx": 2324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f73dbe5-a6a4-4299-8dde-57349ee461e5": {"__data__": {"id_": "6f73dbe5-a6a4-4299-8dde-57349ee461e5", "embedding": null, "metadata": {"filename": "platform.planqk.de_quantum-backends.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3df90dc-5eb4-4aa0-befa-38adc10f885c", "node_type": "4", "metadata": {"filename": "platform.planqk.de_quantum-backends.json"}, "hash": "df2c6a9d7f02f83f041a342eacb6932f96a942491d89fa341d25999b1202ea0c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"PLANQK Platform\",\n  \"content\": \"PLANQK Platform\",\n  \"url\": \"https://platform.planqk.de/quantum-backends\"\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 120, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6f136f2-41f7-427b-972c-99d148e8f0d6": {"__data__": {"id_": "b6f136f2-41f7-427b-972c-99d148e8f0d6", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "3819b8e717dff46f848b0568f31b7da667a600720678f4204c9c791022e7814b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c47d06ee-4281-4432-8938-e1956e39a300", "node_type": "1", "metadata": {}, "hash": "d708084f2d379eaabad0f6cdc8406d9ceb4545e7c29bd14b77138c159df88752", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Manage Access Tokens | PLANQK Docs\",\n  \"content\": \"Manage Access Tokens | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1115, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c47d06ee-4281-4432-8938-e1956e39a300": {"__data__": {"id_": "c47d06ee-4281-4432-8938-e1956e39a300", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "3819b8e717dff46f848b0568f31b7da667a600720678f4204c9c791022e7814b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6f136f2-41f7-427b-972c-99d148e8f0d6", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "f22b2aa15a1b856c6cc1a221f4da38499507cbc012ce8e12174b0cab2e7f2533", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "352bda03-c304-4a89-b936-0c4907126b12", "node_type": "1", "metadata": {}, "hash": "1029152fb0511b389145d3c8cce4a59c7f3567c866c1da42e1ee21aff6b1025f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nManage Access Tokens\\n\u200b\\nIn PLANQK, access tokens are used in token-based authentications to allow users to access the PLANQK API or to let PLANQK at runtime access the API of a quantum backend provider.\\nPLANQK supports two types of access tokens: (1)\\nPersonal Access Tokens\\nfor accessing the PLANQK API, e.g.,", "mimetype": "text/plain", "start_char_idx": 1023, "end_char_idx": 1844, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "352bda03-c304-4a89-b936-0c4907126b12": {"__data__": {"id_": "352bda03-c304-4a89-b936-0c4907126b12", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "3819b8e717dff46f848b0568f31b7da667a600720678f4204c9c791022e7814b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c47d06ee-4281-4432-8938-e1956e39a300", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "a552f71749da2e34f80924f00604331e6642760b24b731be8b09062a6af20cb8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fbcfbe19-3584-401a-b01c-17f2c3857e6d", "node_type": "1", "metadata": {}, "hash": "68257259ccbaa4b1669a196d0ef5dbbac10ccec877922635caae1bd59acad613", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "e.g., by the\\nPLANQK CLI\\nto automate the interaction with the PLANQK Platform or by the\\nPLANQK Quantum SDK\\nto develop and execute quantum circuits using our Qiskit extension, and (2)\\nProvider Access Tokens\\nto allow PLANQK accessing the API of quantum backend providers at runtime. This is especially useful when you want to execute your quantum solutions using your own accounts for certain quantum backends (bring your own token).\\nPersonal Access Tokens\\n\u200b\\nYou can use personal access tokens to access the PLANQK API, e.g., by the\\nPLANQK CLI\\nor by the\\nPLANQK Quantum SDK\\n. Further, you can use them to authenticate any custom application that wants to interact with the PLANQK Platform API.\\nTo create a personal access token to your account, go to the user-menu in the top right corner and click on \\\"Settings\\\". Under \\\"Personal Access Tokens\\\" you can create new personal access tokens and manage existing ones.\\nNOTE\\nPersonal access tokens can only be created for user accounts.", "mimetype": "text/plain", "start_char_idx": 1839, "end_char_idx": 2834, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fbcfbe19-3584-401a-b01c-17f2c3857e6d": {"__data__": {"id_": "fbcfbe19-3584-401a-b01c-17f2c3857e6d", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "3819b8e717dff46f848b0568f31b7da667a600720678f4204c9c791022e7814b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "352bda03-c304-4a89-b936-0c4907126b12", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}, "hash": "7bdf37271507eb7045dceebce1f9dbeaf348e0692e3cd8d26af3429635204bdd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "You can use your personal access token to interact with organizations you are a member of.\\nProvider Access Tokens\\n\u200b\\nBy bringing your own access tokens, you can use your own accounts for certain quantum backends. This allows PLANQK to access quantum backend providers at runtime.\\nTo add a token for your account, go to the user-menu in the top right corner and click on \\\"Settings\\\". Under \\\"Provider Access Tokens\\\" you can add different tokens to your account, depending on the provider.\\nAlternatively, when you are an owner or maintainer of an organization, you can provide access tokens in the section \\\"Provider Access Tokens\\\" of your organization settings. If provided, every member of the organization can run circuits/jobs with these access tokens.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nManage Organizations\\nNext page\\nManage Quantum Jobs\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/manage-access-tokens.html\"\n}", "mimetype": "text/plain", "start_char_idx": 2835, "end_char_idx": 3865, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17ad4e46-17c8-46e4-85b5-e337fd7f3811": {"__data__": {"id_": "17ad4e46-17c8-46e4-85b5-e337fd7f3811", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5cb17e70-bcfa-4f60-ad28-4470886cf744", "node_type": "1", "metadata": {}, "hash": "b65dd361f4794def375301991d16155554d6c0662b16dd9263d46addf4a6e64f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Accessing Services in Python | PLANQK Docs\",\n  \"content\": \"Accessing Services in Python | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1116, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cb17e70-bcfa-4f60-ad28-4470886cf744": {"__data__": {"id_": "5cb17e70-bcfa-4f60-ad28-4470886cf744", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17ad4e46-17c8-46e4-85b5-e337fd7f3811", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "c905ccdc595524868fd7248e0e016d34142a1f6c410673800aba81f3d6bb3568", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50605842-e7a2-4960-b44f-519a5ef694f8", "node_type": "1", "metadata": {}, "hash": "136e604a05efd963751acffd66acba14d931b0dc45b6f0af7618ada1009c9958", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nAccessing Services in Python\\n\u200b\\nThe PLANQK Service SDK enables you to access and monitor your deployed services directly from a Python program.\\nInstallation\\n\u200b\\nBegin by installing the PLANQK Service SDK using\\npip\\n:\\nbash\\npip\\ninstall\\n--upgrade\\nplanqk-service-sdk\\nUsing the SDK\\n\u200b\\nReplace the placeholders\\nyour_consumer_key\\nand\\nyour_consumer_secret\\nin the code snippet below with the credentials provided in one of your platform applications. Additionally,", "mimetype": "text/plain", "start_char_idx": 1016, "end_char_idx": 2016, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50605842-e7a2-4960-b44f-519a5ef694f8": {"__data__": {"id_": "50605842-e7a2-4960-b44f-519a5ef694f8", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cb17e70-bcfa-4f60-ad28-4470886cf744", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "bbc3d574d0e7146d13a06f3a4afd93d834782bd999aa871335d1bebeec61eb95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a18d879f-b48c-4336-9453-86f8072126f8", "node_type": "1", "metadata": {}, "hash": "9c72578444b07ad39bb5ce413f94b3691469b12dcbf33b8ff4e06f5db493480a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Additionally, configure the\\nservice_endpoint\\nto the endpoint URL of the subscribed PLANQK service (see list of subscriptions in an application).\\npython\\n# Your consumer key and secret from your application details\\nconsumer_key\\n=\\n\\\"your_consumer_key\\\"\\nconsumer_secret\\n=\\n\\\"your_consumer_secret\\\"\\n# Service endpoint from the application's subscription details\\nservice_endpoint\\n=\\n\\\"https://gateway.platform.planqk.de/...\\\"\\nCreate a client and start a service execution:\\npython\\nfrom\\nplanqk.service.client\\nimport\\nPlanqkServiceClient\\n# Create a client\\nclient\\n=\\nPlanqkServiceClient(service_endpoint, consumer_key, consumer_secret)\\n# Prepare your input data and parameters\\ndata\\n=\\n{\\n\\\"input\\\"\\n: {\\n\\\"a\\\"\\n:\\n1\\n,\\n\\\"b\\\"\\n:\\n2\\n}}\\nparams\\n=\\n{\\n\\\"param1\\\"\\n:\\n\\\"value1\\\"\\n,\\n\\\"param2\\\"\\n:\\n\\\"value2\\\"\\n}\\n# Start a service execution\\nservice_execution\\n=\\nclient.", "mimetype": "text/plain", "start_char_idx": 2003, "end_char_idx": 2885, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a18d879f-b48c-4336-9453-86f8072126f8": {"__data__": {"id_": "a18d879f-b48c-4336-9453-86f8072126f8", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50605842-e7a2-4960-b44f-519a5ef694f8", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "714807b16ea5ea160a7ad1d37fd52b14a69f0a36ad4960dddfc859b1ecb9b2bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b7e9b54-204c-44f6-a0a7-24a228c8cae6", "node_type": "1", "metadata": {}, "hash": "197e61ca5c55756e7f3739a7d180b298c09c18aedab593e3eeeb9f6eab34ab86", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "run(\\nrequest\\n=\\n{\\n\\\"data\\\"\\n: data,\\n\\\"params\\\"\\n: params})\\n# Wait for the service execution to finish (blocking)\\nservice_execution.wait_for_final_state()\\nprint\\n(\\nf\\n\\\"Service execution finished at '\\n{\\nservice_execution.ended_at\\n}\\n' with status '\\n{\\nservice_execution.status\\n}\\n'\\\"\\n)\\nYou may perform other operations while waiting for the service execution to finish:\\npython\\nwhile\\nnot\\nservice_execution.has_finished:\\nprint\\n(\\n\\\"Waiting for service execution to finish...\\\"\\n)\\nAlternatively, you may poll the service execution status:\\npython\\nwhile\\nservice_execution.status\\nnot\\nin\\n[\\n\\\"SUCCEEDED\\\"\\n,\\n\\\"FAILED\\\"\\n,\\n\\\"CANCELLED\\\"\\n]:\\nservice_execution.refresh()\\nUse the client to retrieve a service execution by its ID:\\npython\\nservice_execution\\n=\\nclient.", "mimetype": "text/plain", "start_char_idx": 2885, "end_char_idx": 3673, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b7e9b54-204c-44f6-a0a7-24a228c8cae6": {"__data__": {"id_": "9b7e9b54-204c-44f6-a0a7-24a228c8cae6", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a18d879f-b48c-4336-9453-86f8072126f8", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "4c49bc02f05b9b273c2b97962e44d12aa50c4efb4247cc3895b4e9528181cece", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552", "node_type": "1", "metadata": {}, "hash": "e5143654797fdcfdf814f5167b58ee3e3ba7558d107679f22d613ac814aed840", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "refresh()\\nUse the client to retrieve a service execution by its ID:\\npython\\nservice_execution\\n=\\nclient.get_service_execution(\\n\\\"0030737b-35cb-46a8-88c2-f59d4885484d\\\"\\n)\\nprint\\n(\\nf\\n\\\"Service execution finished at '\\n{\\nservice_execution.ended_at\\n}\\n' with status '\\n{\\nservice_execution.status\\n}\\n'\\\"\\n)\\nRetrieve the result:\\npython\\nresult\\n=\\nservice_execution.result()\\nRetrieve service execution logs:\\npython\\nlogs\\n=\\nservice_execution.logs()\\nprint\\n(\\n\\\"...\\\"\\n)\\nfor\\nlog\\nin\\nlogs[\\n-\\n5\\n:]:\\nprint\\n(log)\\nList and download the result files:\\npython\\nimport\\nos\\n# List the result files\\nfiles\\n=\\nservice_execution.result_files()\\n# Download the result files\\ncwd\\n=\\nos.getcwd()\\nfor\\nfile\\nin\\nfiles:\\nservice_execution.download_result_file(\\nfile\\n, cwd)\\nprint\\n(files)\\nAlternatively,", "mimetype": "text/plain", "start_char_idx": 3566, "end_char_idx": 4379, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552": {"__data__": {"id_": "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b7e9b54-204c-44f6-a0a7-24a228c8cae6", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "789d26429f4fd0507db6c6adc6ec7c1cd3b161dba38e64ebe03dc8e985be6b3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c035760e-2712-4512-82d8-349f06f40cbd", "node_type": "1", "metadata": {}, "hash": "e7339f54cecf70f15d2778f37ba11a7bdb542def4dfee6f711d65e55dbdaf34c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "download_result_file(\\nfile\\n, cwd)\\nprint\\n(files)\\nAlternatively, you may access the raw byte stream:\\npython\\nfile_stream\\n=\\nservice_execution.result_file_stream(\\n\\\"output.json\\\"\\n)\\nwith\\nopen\\n(\\n\\\"output.json\\\"\\n,\\n\\\"wb\\\"\\n)\\nas\\nf:\\nfor\\nchunk\\nin\\nfile_stream:\\nf.write(chunk)\\nUse a Data Pool as input data:\\npython\\nfrom\\nplanqk.service.sdk.types.input_data_ref\\nimport\\nInputDataRef\\n# Create a client\\nclient\\n=\\nPlanqkServiceClient(service_endpoint, consumer_key, consumer_secret)\\n# Create a data pool, and upload a file called 'data.json'. Use the \\\"Copy File Reference\\\" button in\\n# the PLANQK Data Pool UI to copy the data pool id, data source descriptor id, and file id. Paste the\\n# copied values into the file_reference dictionary below.", "mimetype": "text/plain", "start_char_idx": 4312, "end_char_idx": 5072, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c035760e-2712-4512-82d8-349f06f40cbd": {"__data__": {"id_": "c035760e-2712-4512-82d8-349f06f40cbd", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "18a46f746e144e010ec6ffb80fe81e87c7823f5343ac6842545d10c0815903f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75", "node_type": "1", "metadata": {}, "hash": "68ef4d408cd50adb81cbc0fa3b725221580b008faf7ee43392aa8043944813c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Paste the\\n# copied values into the file_reference dictionary below.\\nfile_reference\\n=\\n{\\n\\\"dataPoolId\\\"\\n:\\n\\\"9b943af3-ca78-4d6e-87fd-33129f5330a2\\\"\\n,\\n\\\"dataSourceDescriptorId\\\"\\n:\\n\\\"a1e4f7ab-82d5-4158-98c3-3562635cedd2\\\"\\n,\\n\\\"fileId\\\"\\n:\\n\\\"f9b5c9a2-0101-46a8-9958-383670a2cef4\\\"\\n,\\n}\\n# Use the InputDataRef class to define a reference to a file in a data pool.\\ndata_ref\\n=\\nInputDataRef.model_validate(\\n{\\n\\\"data_pool_id\\\"\\n: file_reference[\\n\\\"dataPoolId\\\"\\n],\\n\\\"data_source_descriptor_id\\\"\\n: file_reference[\\n\\\"dataSourceDescriptorId\\\"\\n],\\n\\\"file_id\\\"\\n: file_reference[\\n\\\"fileId\\\"\\n],", "mimetype": "text/plain", "start_char_idx": 5004, "end_char_idx": 5608, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75": {"__data__": {"id_": "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c035760e-2712-4512-82d8-349f06f40cbd", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "5090ce514b4778637cb8cbd631be589ba8ee75571ded5bbf2c32795303670792", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78b5d6d6-68b4-44b0-b129-d8d604c65194", "node_type": "1", "metadata": {}, "hash": "f75ed11da0a1891e03f0377f711a0ebd4548b21f0bfb5c95a47e434a5969a293", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\n\\\"file_id\\\"\\n: file_reference[\\n\\\"fileId\\\"\\n],\\n}\\n)\\nparams\\n=\\n{\\n\\\"param1\\\"\\n:\\n\\\"value1\\\"\\n,\\n\\\"param2\\\"\\n:\\n\\\"value2\\\"\\n}\\n# Start a service execution\\nservice_execution\\n=\\nclient.run({\\n\\\"dataRef\\\"\\n: data_ref,\\n\\\"params\\\"\\n: params})\\n# Wait for the service execution to finish (blocking)\\nservice_execution.wait_for_final_state()\\nprint\\n(\\nf\\n\\\"Service execution finished at '\\n{\\nservice_execution.ended_at\\n}\\n' with status '\\n{\\nservice_execution.status\\n}\\n'\\\"\\n)\\nSupported Operations\\n\u200b\\nThe SDK provides a simple interface to interact with the PLANQK Service API. Use the\\nPlanqkServiceClient\\nclass to create a client and start a service execution.", "mimetype": "text/plain", "start_char_idx": 5560, "end_char_idx": 6228, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78b5d6d6-68b4-44b0-b129-d8d604c65194": {"__data__": {"id_": "78b5d6d6-68b4-44b0-b129-d8d604c65194", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "95753eda71d616d5a8569964437579ca32b0e824fce4023cee2c815660e4d576", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec98bd42-7c0c-45ab-857d-25059459c406", "node_type": "1", "metadata": {}, "hash": "0e43520965b9f0454ccb97c7a874b6482e28ec2ff252b192f4d4d48ae8f7417e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Use the\\nPlanqkServiceClient\\nclass to create a client and start a service execution. The\\nPlanqkServiceExecution\\nclass represents a service execution and provides methods to monitor and manage it.\\nPlanqkServiceClient\\n\u200b\\nMethod\\nDescription\\n__init__\\nInitializes the client with the service endpoint, consumer key, and secret.\\nrun\\nStarts a service execution with the provided request data and parameters. Returns a\\nPlanqkServiceExecution\\nobject.\\nget_service_execution\\nRetrieves a service execution by its ID. Returns a\\nPlanqkServiceExecution\\nobject.\\nPlanqkServiceExecution\\n\u200b\\nProperty\\nDescription\\nid\\nThe ID of the service execution.\\nstatus\\nThe last known status of the service execution.\\ncreated_at\\nThe creation time of the service execution.\\nstarted_at\\nThe start time of the service execution.\\nended_at\\nThe end time of the service execution.\\nhas_finished\\nChecks if the service execution has finished.\\nMethod\\nDescription\\nwait_for_final_state\\nWaits for the service execution to reach a final state (blocking).", "mimetype": "text/plain", "start_char_idx": 6143, "end_char_idx": 7182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec98bd42-7c0c-45ab-857d-25059459c406": {"__data__": {"id_": "ec98bd42-7c0c-45ab-857d-25059459c406", "embedding": null, "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d0c5b4c6-1282-4fbc-a989-168494d920a7", "node_type": "4", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "e81626d96bd26981f3d09df65c2196cee86a53a551557b311d0b94f9ea0a84b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78b5d6d6-68b4-44b0-b129-d8d604c65194", "node_type": "1", "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}, "hash": "095b96d7048719f34327b7545cb0d1d60e91d36e4b2efc2d77e06cb2cc60c5da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nMethod\\nDescription\\nwait_for_final_state\\nWaits for the service execution to reach a final state (blocking).\\nrefresh\\nPolls the service execution status.\\nresult\\nRetrieves the result of the service execution.\\nresult_files\\nLists the result files of the service execution.\\ndownload_result_file\\nDownloads a specific result file to the specified directory.\\nresult_file_stream\\nAccesses the raw byte stream of a specific result file.\\ncancel\\nCancels a service execution.\\nlogs\\nRetrieves the logs of the service execution.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nQuantum SDK\\nNext page\\nCLI Reference\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/sdk-reference-service.html\"\n}", "mimetype": "text/plain", "start_char_idx": 7071, "end_char_idx": 7854, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6f1bb08-88cc-4d32-9b78-6471e91c69af": {"__data__": {"id_": "f6f1bb08-88cc-4d32-9b78-6471e91c69af", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c321bcd7-dc25-4292-aa9d-fa46ec798942", "node_type": "1", "metadata": {}, "hash": "0e9dfb620e01bfd7b4aeafe9c1dc5451dc589f850dcba7894547c5acc7f870fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"CLI Reference | PLANQK Docs\",\n  \"content\": \"CLI Reference | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1107, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c321bcd7-dc25-4292-aa9d-fa46ec798942": {"__data__": {"id_": "c321bcd7-dc25-4292-aa9d-fa46ec798942", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6f1bb08-88cc-4d32-9b78-6471e91c69af", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "315385168943909bd5ff8840e49a2cd7d4c6d0ebbf76f0705d7f13975b52d0e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d0c08dc7-47be-4c12-b5bb-44df475f9bee", "node_type": "1", "metadata": {}, "hash": "a25b2072ba2c6ec916cc0ebfa5863b18054659a2665d1bf4fa4729d155d48044", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nCLI Reference\\n\u200b\\nThe PLANQK Command Line Interface (CLI) lets you interact with the PLANQK Platform directly from your terminal. We have installation instructions to guide you through the initial setup in our\\nquickstart\\nguide.\\nInstallation\\n\u200b\\nTo install the PLANQK CLI, you must install Node.js 18 or higher and the npm command line interface using either a\\nNode version manager\\nor a\\nNode installer\\n.", "mimetype": "text/plain", "start_char_idx": 1009, "end_char_idx": 1926, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0c08dc7-47be-4c12-b5bb-44df475f9bee": {"__data__": {"id_": "d0c08dc7-47be-4c12-b5bb-44df475f9bee", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c321bcd7-dc25-4292-aa9d-fa46ec798942", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "a7c4e2a203e250a57c48abcc82461897aef0aaa9d0e676b3a353250c3d518707", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b", "node_type": "1", "metadata": {}, "hash": "3d4328a53ed494c355f027978ea824fe9f69a9af1b8d8d69524cdff8198a88ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nThen install the PLANQK CLI globally using npm:\\nbash\\nnpm\\ninstall\\n-g\\n@planqk/planqk-cli\\nIMPORTANT\\nMake sure you have uninstalled the deprecated CLI:\\nbash\\nnpm\\nuninstall\\n-g\\n@anaqor/planqk\\nYou can use the\\nhelp\\ncommand to get information about the supported commands:\\nbash\\nplanqk\\nhelp\\nYou may also get information about a specific command:\\nbash\\nplanqk\\nhelp\\n<\\ncomman\\nd\\n>\\n# or\\nplanqk\\n<\\ncomman\\nd\\n>\\n--help\\nAuthentication\\n\u200b\\nPlease copy your\\npersonal access token\\nto your clipboard.\\nLogin to your account using your access token:\\nbash\\nplanqk\\nlogin\\n-t\\n<\\nyour\\naccess\\ntoke\\nn\\n>\\nUsage\\n\u200b\\nsh-session\\n$ npm install -g @planqk/planqk-cli\\n$ planqk COMMAND\\nrunning command...\\n$ planqk (--version)\\n@planqk/planqk-cli/2.", "mimetype": "text/plain", "start_char_idx": 1926, "end_char_idx": 2681, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b": {"__data__": {"id_": "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d0c08dc7-47be-4c12-b5bb-44df475f9bee", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "76e76b6a5a23f1498e5817e5d221790697e540e413ec8ae54df15a4d05c46fdf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "810c5f75-bfee-4b24-ae45-2b5ee259b1ab", "node_type": "1", "metadata": {}, "hash": "651948963ea7035e7ddef509ceea4501bb5ccac7f77689100cceb4708a38c22b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "..\\n$ planqk (--version)\\n@planqk/planqk-cli/2.24.1 darwin-arm64 node-v22.11.0\\n$ planqk --help [COMMAND]\\nUSAGE\\n$ planqk COMMAND\\n...\\nCommands\\n\u200b\\nplanqk autocomplete [SHELL]\\nplanqk compress\\nplanqk get-context\\nplanqk help [COMMAND]\\nplanqk init\\nplanqk list-contexts\\nplanqk login\\nplanqk logout\\nplanqk openapi\\nplanqk run [SERVICEID]\\nplanqk serve\\nplanqk services\\nplanqk set-context [CONTEXTID]\\nplanqk up\\nplanqk version\\nplanqk autocomplete [SHELL]\\n\u200b\\nDisplay autocomplete installation instructions.\\nUSAGE\\n$ planqk autocomplete [SHELL] [-r]\\nARGUMENTS\\nSHELL  (zsh|bash|powershell) Shell type\\nFLAGS\\n-r, --refresh-cache  Refresh cache (ignores displaying instructions)\\nDESCRIPTION\\nDisplay autocomplete installation instructions.", "mimetype": "text/plain", "start_char_idx": 2634, "end_char_idx": 3380, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "810c5f75-bfee-4b24-ae45-2b5ee259b1ab": {"__data__": {"id_": "810c5f75-bfee-4b24-ae45-2b5ee259b1ab", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "937b07ba16d993d4d9edc1ea1422c03ae8dc9c6094043815a035304304304614", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29a995dc-e395-4a21-96d8-e473f4ca2f27", "node_type": "1", "metadata": {}, "hash": "22f28d1b277bed9117e90406f26832c4d6d72c74900ac2bac5b5356efc289a7c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "--refresh-cache  Refresh cache (ignores displaying instructions)\\nDESCRIPTION\\nDisplay autocomplete installation instructions.\\nEXAMPLES\\n$ planqk autocomplete\\n$ planqk autocomplete bash\\n$ planqk autocomplete zsh\\n$ planqk autocomplete powershell\\n$ planqk autocomplete --refresh-cache\\nSee code:\\n@oclif/plugin-autocomplete\\nplanqk compress\\n\u200b\\nCompresses the current project and creates a ZIP file. Use the '.planqkignore' file to exclude files and directories from the ZIP file.\\nUSAGE\\n$ planqk compress\\nDESCRIPTION\\nCompresses the current project and creates a ZIP file. Use the '.planqkignore' file to exclude files and directories\\nfrom the ZIP file.\\nEXAMPLES\\n$ planqk compress\\nSee code:\\nsrc/commands/compress/index.ts\\nplanqk get-context\\n\u200b\\nGet the current context, i.e., the personal or organization account you are currently working with.\\nUSAGE\\n$ planqk get-context\\nDESCRIPTION\\nGet the current context, i.e., the personal or organization account you are currently working with.", "mimetype": "text/plain", "start_char_idx": 3254, "end_char_idx": 4253, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29a995dc-e395-4a21-96d8-e473f4ca2f27": {"__data__": {"id_": "29a995dc-e395-4a21-96d8-e473f4ca2f27", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "810c5f75-bfee-4b24-ae45-2b5ee259b1ab", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "dbe4c9412f362534ca6617a8296c26db8d501383fc3ccd18ae686ad6b04eae78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c6c81cf-49a1-4d3f-9884-b02309286afe", "node_type": "1", "metadata": {}, "hash": "674f7b06a452bdc9d40efc79e2ddf502e6f82c7acb5e14117b3b2233d2140994", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "i.e., the personal or organization account you are currently working with.\\nEXAMPLES\\n$ planqk get-context\\nSee code:\\nsrc/commands/get-context/index.ts\\nplanqk help [COMMAND]\\n\u200b\\nDisplay help for planqk.\\nUSAGE\\n$ planqk help [COMMAND...] [-n]\\nARGUMENTS\\nCOMMAND...  Command to show help for.\\nFLAGS\\n-n, --nested-commands  Include all nested commands in the output.\\nDESCRIPTION\\nDisplay help for planqk.\\nSee code:\\n@oclif/plugin-help\\nplanqk init\\n\u200b\\nBootstrap project to create a PLANQK Service.\\nUSAGE\\n$ planqk init [--name <value>] [--non-interactive]\\nFLAGS\\n--name=<value>     The name of the service\\n--non-interactive  Run it in non-interactive mode\\nDESCRIPTION\\nBootstrap project to create a PLANQK Service.\\nEXAMPLES\\n$ planqk init\\nSee code:\\nsrc/commands/init/index.ts\\nplanqk list-contexts\\n\u200b\\nRetrieves the available contexts,", "mimetype": "text/plain", "start_char_idx": 4179, "end_char_idx": 5025, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2c6c81cf-49a1-4d3f-9884-b02309286afe": {"__data__": {"id_": "2c6c81cf-49a1-4d3f-9884-b02309286afe", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29a995dc-e395-4a21-96d8-e473f4ca2f27", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "a905f4ee38fb7bc8caac2b63eddef8fe0a3094ef9843dd6c27a1f7a9d578e562", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e45d96b-71fa-4752-bbe0-0380e6748522", "node_type": "1", "metadata": {}, "hash": "330441e480b56e692ee3722ff4fc8c6c35cbae985f374d73a7088a57e2273363", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ts\\nplanqk list-contexts\\n\u200b\\nRetrieves the available contexts, i.e., the personal or organizational accounts available to you to work with.\\nUSAGE\\n$ planqk list-contexts\\nDESCRIPTION\\nRetrieves the available contexts, i.e., the personal or organizational accounts available to you to work with.\\nEXAMPLES\\n$ planqk list-contexts\\nSee code:\\nsrc/commands/list-contexts/index.ts\\nplanqk login\\n\u200b\\nLogin with your PLANQK credentials\\nUSAGE\\n$ planqk login [-t <value>]\\nFLAGS\\n-t, --token=<value>  Your personal access token\\nDESCRIPTION\\nLogin with your PLANQK credentials\\nEXAMPLES\\n$ planqk login -t <personal access token>\\nSee code:\\nsrc/commands/login/index.ts\\nplanqk logout\\n\u200b\\nLogout from PLANQK\\nUSAGE\\n$ planqk logout\\nDESCRIPTION\\nLogout from PLANQK\\nEXAMPLES\\n$ planqk logout\\nSee code:\\nsrc/commands/logout/index.", "mimetype": "text/plain", "start_char_idx": 4963, "end_char_idx": 5788, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e45d96b-71fa-4752-bbe0-0380e6748522": {"__data__": {"id_": "5e45d96b-71fa-4752-bbe0-0380e6748522", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c6c81cf-49a1-4d3f-9884-b02309286afe", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "e01c4ac9a58ef0c29f4f246a70449826ff5d27fe3b4acc163af0093c10d6cab4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f2073db-e48f-4cb1-8b25-4a2b396e7def", "node_type": "1", "metadata": {}, "hash": "4a4e693683f5f0f43576a418e74ccb53951e55de12b1df1366e62bae7b512ac0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ts\\nplanqk openapi\\n\u200b\\nGenerates the OpenAPI description for your project based on the parameter and return types of your run() method. You can use this command to verify how the API of your project would look like when deployed on PLANQK. The output of this command will be used when creating or updating your service.\\nUSAGE\\n$ planqk openapi [-f] [--file <value>] [--format <value>]\\nFLAGS\\n-f, --force           Overwrite the output file if it already exists\\n--file=<value>    The file to write the OpenAPI description to\\n--format=<value>  The format to generate the OpenAPI description [possible values: yaml]\\nDESCRIPTION\\nGenerates the OpenAPI description for your project based on the parameter and return types of your run() method. You\\ncan use this command to verify how the API of your project would look like when deployed on PLANQK. The output of this\\ncommand will be used when creating or updating your service.\\nEXAMPLES\\n$ planqk openapi\\n$ planqk openapi --file=./openapi.", "mimetype": "text/plain", "start_char_idx": 5788, "end_char_idx": 6781, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f2073db-e48f-4cb1-8b25-4a2b396e7def": {"__data__": {"id_": "7f2073db-e48f-4cb1-8b25-4a2b396e7def", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e45d96b-71fa-4752-bbe0-0380e6748522", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d7d1cee7b5daafa46883f1ba88c5255739bb1015921ce2393cfa7ddde95f16a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb32897d-ce13-43d4-8509-05f8e2e7f254", "node_type": "1", "metadata": {}, "hash": "cbb7c079fc55ed5b9da0439fa2142b23c4f5fb1d93d13d8abfd12ae30689f610", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nEXAMPLES\\n$ planqk openapi\\n$ planqk openapi --file=./openapi.yaml --format=yaml --force\\nSee code:\\nsrc/commands/openapi/index.ts\\nplanqk run [SERVICEID]\\n\u200b\\nCreates a job execution of a PLANQK Service\\nUSAGE\\n$ planqk run [SERVICEID] [-d <value>] [--data-file <value>] [--detached] [-p <value>] [--params-file\\n<value>]\\nFLAGS\\n-d, --data=<value>         Input data as JSON string.\\n-p, --params=<value>       Parameters as JSON string.\\n--data-file=<value>    Relative path to file containing input data.\\n--detached             Executes the job in detached mode, i.e., without waiting for it to finish.\\n--params-file=<value>  Relative path to file containing params.\\nDESCRIPTION\\nCreates a job execution of a PLANQK Service\\nEXAMPLES\\n$ planqk run\\n$ planqk run --detached\\n$ planqk run -d '{\\\"values\\\": [10,", "mimetype": "text/plain", "start_char_idx": 6717, "end_char_idx": 7533, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb32897d-ce13-43d4-8509-05f8e2e7f254": {"__data__": {"id_": "fb32897d-ce13-43d4-8509-05f8e2e7f254", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f2073db-e48f-4cb1-8b25-4a2b396e7def", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "81b78695a30765555efbfaceab7306de31abdf90acfea4419e9ece066c5374b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c82ba85c-38d9-4f7b-a9f5-74df5c238a47", "node_type": "1", "metadata": {}, "hash": "4debe62608533e3bdcf06e1eaef84b690fef2a1d4df758d5ed681d45860a0ba2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12]}' -p '{\\\"round_up\\\": true}'\\n$ planqk run --data-file=./input/data.json --params-file=./input/params.json\\nSee code:\\nsrc/commands/run/index.ts\\nplanqk serve\\n\u200b\\nRuns your project in a containerized environment and expose it through a local web server, similarly to how PLANQK would run your code. The local web server exposes the same HTTP endpoints to start a service execution, to check the status of running executions, to cancel executions, and to retrieve execution results.\\nUSAGE\\n$ planqk serve [-p <value>] [--log_level <value>]\\nFLAGS\\n-p, --port=<value>       The port on which the local web server accepts requests\\n--log_level=<value>  [default: INFO] The log level for the service, possible values: DEBUG, INFO, WARNING, ERROR,\\nCRITICAL\\nDESCRIPTION\\nRuns your project in a containerized environment and expose it through a local web server, similarly to how PLANQK\\nwould run your code. The local web server exposes the same HTTP endpoints to start a service execution,", "mimetype": "text/plain", "start_char_idx": 7533, "end_char_idx": 8523, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c82ba85c-38d9-4f7b-a9f5-74df5c238a47": {"__data__": {"id_": "c82ba85c-38d9-4f7b-a9f5-74df5c238a47", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb32897d-ce13-43d4-8509-05f8e2e7f254", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "4c0b2fbed59ad98966fb1702ae6fa4aed86362b2d5cb66eec925d0443e683564", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2", "node_type": "1", "metadata": {}, "hash": "ab38351090f2ae46f11d4532488474f3ab5146d2736ae5de0006fdf16336a5d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "The local web server exposes the same HTTP endpoints to start a service execution, to check the\\nstatus of running executions, to cancel executions, and to retrieve execution results.\\nEXAMPLES\\n$ planqk serve\\n$ planqk serve -p <port> --log_level <log_level>\\nSee code:\\nsrc/commands/serve/index.ts\\nplanqk services\\n\u200b\\nList all services of the current context.\\nUSAGE\\n$ planqk services\\nDESCRIPTION\\nList all services of the current context.\\nEXAMPLES\\n$ planqk services\\nSee code:\\nsrc/commands/services/index.ts\\nplanqk set-context [CONTEXTID]\\n\u200b\\nSet the current context, i.e., the personal or organization account you are currently working with.\\nUSAGE\\n$ planqk set-context [CONTEXTID]\\nDESCRIPTION\\nSet the current context, i.e., the personal or organization account you are currently working with.\\nEXAMPLES\\n$ planqk set-context\\n$ planqk set-context <context-id>\\nSee code:\\nsrc/commands/set-context/index.", "mimetype": "text/plain", "start_char_idx": 8441, "end_char_idx": 9359, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2": {"__data__": {"id_": "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c82ba85c-38d9-4f7b-a9f5-74df5c238a47", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "19a2e6a92d35558b130c42f599ac0bacac893e818b243c588f8c7e8bd3f78713", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9b4960f-abe9-403e-b53e-b23113a83e19", "node_type": "1", "metadata": {}, "hash": "e142424ad8b4bda1c6cd6f00fa18b6abf74cdc8a15561836feb8a00e02df0ad9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ts\\nplanqk up\\n\u200b\\nCreates or updates a PLANQK service\\nUSAGE\\n$ planqk up [--silent]\\nFLAGS\\n--silent  Suppresses all outputs, helpful when executed in a CI/CD pipeline.\\nDESCRIPTION\\nCreates or updates a PLANQK service\\nEXAMPLES\\n$ planqk up\\nSee code:\\nsrc/commands/up/index.ts\\nplanqk version\\n\u200b\\nUSAGE\\n$ planqk version [--json] [--verbose]\\nFLAGS\\n--verbose  Show additional information about the CLI.\\nGLOBAL FLAGS\\n--json  Format output as json.\\nFLAG DESCRIPTIONS\\n--verbose  Show additional information about the CLI.\\nAdditionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.\\nSee code:\\n@oclif/plugin-version\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nService SDK\\nNext page\\nplanqk.json Reference\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.", "mimetype": "text/plain", "start_char_idx": 9359, "end_char_idx": 10260, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a9b4960f-abe9-403e-b53e-b23113a83e19": {"__data__": {"id_": "a9b4960f-abe9-403e-b53e-b23113a83e19", "embedding": null, "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7cae7cea-0cc1-40b9-a985-0a2b79001fec", "node_type": "4", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d9b7c0cbc570afecde82b9c52ab6a18b92893eb00a330100c8447389c4c47b53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2", "node_type": "1", "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}, "hash": "d25506d8b5f414e0047ec743cf54351e5ed7ebe3c75a2bc32ae92df17fba3714", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/cli-reference.html\"\n}", "mimetype": "text/plain", "start_char_idx": 10188, "end_char_idx": 10291, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "37708308-f3d8-4e62-b0f3-de2d56e46ab1": {"__data__": {"id_": "37708308-f3d8-4e62-b0f3-de2d56e46ab1", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d08291a-17c8-4b27-bea9-216bc4194283", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46e7a9e7-f00d-40b1-b48e-3d0578138670", "node_type": "1", "metadata": {}, "hash": "5b59cea37e9df6bd58037e2686d73183fd901326e64ac87a5e93115141c1c79f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Create a Service | PLANQK Docs\",\n  \"content\": \"Create a Service | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1096, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46e7a9e7-f00d-40b1-b48e-3d0578138670": {"__data__": {"id_": "46e7a9e7-f00d-40b1-b48e-3d0578138670", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d08291a-17c8-4b27-bea9-216bc4194283", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37708308-f3d8-4e62-b0f3-de2d56e46ab1", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "b67a7766bbfb864114103012b399b0f4f2a6606c41b1c5a7e8ad1c68901113b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32d40aa2-8b2b-47b5-8fd5-86d7beb63427", "node_type": "1", "metadata": {}, "hash": "4ca61683ff2544a738413cedcadf624bae373fbfcd67fa40e8a5fcd12693d49c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nCreate a Service\\n\u200b\\nThis step-by-step guide will teach you how to create a PLANQK service based on your implementation. You will learn how to initialize a Docker Python project using the\\nPLANQK CLI\\n, push its code to an implementation and create a PLANQK managed service based on it.", "mimetype": "text/plain", "start_char_idx": 992, "end_char_idx": 1809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32d40aa2-8b2b-47b5-8fd5-86d7beb63427": {"__data__": {"id_": "32d40aa2-8b2b-47b5-8fd5-86d7beb63427", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d08291a-17c8-4b27-bea9-216bc4194283", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46e7a9e7-f00d-40b1-b48e-3d0578138670", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "ea138f3362fe05ebe8e2f9cd93599b6389e4afd1149631f7839331b9eca8e95f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e088cf52-ee34-4ada-aabc-d721748754a3", "node_type": "1", "metadata": {}, "hash": "69c82c9d46fb0adeafeb8ec0a823b3598353c3a7cc611727a3142aaeab843354", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This guide assumes that you already know the basics about\\nmanaged services\\nand\\nimplementations\\n.\\nRequirements\\n\u200b\\nThis guide assumes that you have the latest version of PLANQK CLI installed on your machine. If not you can install it by following the instructions in the\\nCLI reference\\n.\\nInitialize a Docker Python Starter Project\\n\u200b\\nThe PLANQK CLI provides you with a set of starter templates to help you get started quickly with your quantum services. You can see the full list of available templates in our\\nGitLab repository\\n. In this tutorial we will use the\\nDocker Python Starter\\ntemplate to create a new service based on custom Docker containers. To initialize the project, run the following command in your terminal:\\nbash\\nplanqk\\ninit\\nIn the interactive prompt:\\nChoose a name, e.g.,\\nmy-service\\n.\\nSelect\\nDocker Starter\\nas starter template.\\nChoose your resource configuration, e.g., accept the defaults.\\nAfter the initialization, you will find a new folder with the name of your service in the current directory.", "mimetype": "text/plain", "start_char_idx": 1810, "end_char_idx": 2849, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e088cf52-ee34-4ada-aabc-d721748754a3": {"__data__": {"id_": "e088cf52-ee34-4ada-aabc-d721748754a3", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d08291a-17c8-4b27-bea9-216bc4194283", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32d40aa2-8b2b-47b5-8fd5-86d7beb63427", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "662a19e9bd87796a39fd2a554a72978b5bee7ddfb36b5466ddc574a172fe83f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b8f2811-6b63-4d4c-9605-7bde2252d332", "node_type": "1", "metadata": {}, "hash": "7aa4fd9597c4db7d7df502dc6ca06343acc31a7e578361483348573473a1437c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For sake of simplicity, we will not get into details of the generated code in this tutorial. You can check out the README file in the generated project for more information.\\nCreate an implementation and push the code\\n\u200b\\nNext,\\ncreate a new Implementation\\nand upload the code of your service. You can follow the steps in the\\nGetting Started\\nguide. After refreshing your implementation page, you should see all your added files. Similar to the screenshot below.\\nCreate a service based on the implementation\\n\u200b\\nAs your service code includes a Dockerfile, you should see the \\\"Create Service\\\" button in the action bar of your implementation page. Click on the button to create a new PLANQK service based on your implementation. Navigate to the\\nServices\\npage to see your new service.", "mimetype": "text/plain", "start_char_idx": 2850, "end_char_idx": 3638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8b8f2811-6b63-4d4c-9605-7bde2252d332": {"__data__": {"id_": "8b8f2811-6b63-4d4c-9605-7bde2252d332", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d08291a-17c8-4b27-bea9-216bc4194283", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "a1a0b3c12bb5907c1caabf2190aeb2b983b2d34a999af679901a32b04dc62562", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e088cf52-ee34-4ada-aabc-d721748754a3", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}, "hash": "5ef9cf626c793378497e5aebd0fe809a376f9bbb983baab9170eb25b5f7a1f81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Navigate to the\\nServices\\npage to see your new service. Congratulations, you have successfully created a PLANQK service based on your implementation \ud83c\udf89.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nImplementation Settings\\nNext page\\nIntroduction\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/implementations/create-a-service.html\"\n}", "mimetype": "text/plain", "start_char_idx": 3582, "end_char_idx": 4011, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8b8d1aab-cb71-408c-9b36-3d4392a9ec28": {"__data__": {"id_": "8b8d1aab-cb71-408c-9b36-3d4392a9ec28", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dfbed65-f739-4161-8b53-7c41703635da", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "cfb788fa5bb79319d70e202d0095837fd69e174326d978b1898cbf3a778a31f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "891fd70b-ea94-4bfa-bb70-a71744f9d0c5", "node_type": "1", "metadata": {}, "hash": "081285e31a28d2cfd23b46f7016a7130250a9de2282c7e373b09d2fc3571f9ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Manage Quantum Jobs | PLANQK Docs\",\n  \"content\": \"Manage Quantum Jobs | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "891fd70b-ea94-4bfa-bb70-a71744f9d0c5": {"__data__": {"id_": "891fd70b-ea94-4bfa-bb70-a71744f9d0c5", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dfbed65-f739-4161-8b53-7c41703635da", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "cfb788fa5bb79319d70e202d0095837fd69e174326d978b1898cbf3a778a31f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b8d1aab-cb71-408c-9b36-3d4392a9ec28", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "10ad08df73a417142291d031f4ce06502f77c9c6d564ff6083facc6ceb768c16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b07c7d49-28f9-45ff-8f4f-e06aa38316b2", "node_type": "1", "metadata": {}, "hash": "28b87ba366adb39c24ab9c7ef77f449600678146e6490388d945af3212727d41", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nManage Quantum Jobs\\n\u200b\\nGain a comprehensive overview of all quantum jobs or tasks you have submitted using the PLANQK SDK by visiting the\\nQuantum Jobs\\npage.\\nIf you need to view the jobs submitted by an organization you are a member of, simply switch your account context by clicking on your name in the\\nupper right corner\\nof the page.\\nJob Actions\\n\u200b\\nBy clicking the action button on the right side of each job,", "mimetype": "text/plain", "start_char_idx": 998, "end_char_idx": 1947, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b07c7d49-28f9-45ff-8f4f-e06aa38316b2": {"__data__": {"id_": "b07c7d49-28f9-45ff-8f4f-e06aa38316b2", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dfbed65-f739-4161-8b53-7c41703635da", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "cfb788fa5bb79319d70e202d0095837fd69e174326d978b1898cbf3a778a31f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "891fd70b-ea94-4bfa-bb70-a71744f9d0c5", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "32966caf6c1dec597622f30ec670b4e0c3cc59738281dca069781edb40108bd8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f79e87a-9bf2-4528-ad1b-d98967f13768", "node_type": "1", "metadata": {}, "hash": "e9e95b23d9a2b761763deeb248202aab70e49c557ce7cc92241fa7bf80cde6a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\\nJob Actions\\n\u200b\\nBy clicking the action button on the right side of each job, you can perform the following actions:\\nRetrieve Inputs & Results\\n:\\nDownload your quantum job inputs and results (after the job has completed) directly through the UI.\\nCancel Jobs\\n:\\nCancel jobs that are still queued at the backend. This feature helps you save costs, especially if expensive jobs are accidentally submitted to costly backends.\\nManaging Service Jobs\\n\u200b\\nAs a service host, you can view the input data and results of jobs initiated by your service\u2019s executions. Additionally, you have the ability to cancel any jobs that are queued from a service execution.\\nFollow these steps to view jobs associated with a specific service execution:\\nClick on \\\"Applications\\\" tab in the main menu.", "mimetype": "text/plain", "start_char_idx": 1869, "end_char_idx": 2653, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f79e87a-9bf2-4528-ad1b-d98967f13768": {"__data__": {"id_": "3f79e87a-9bf2-4528-ad1b-d98967f13768", "embedding": null, "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dfbed65-f739-4161-8b53-7c41703635da", "node_type": "4", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "cfb788fa5bb79319d70e202d0095837fd69e174326d978b1898cbf3a778a31f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b07c7d49-28f9-45ff-8f4f-e06aa38316b2", "node_type": "1", "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}, "hash": "05eefa0a16faa40d73bfc055d98a6886c914b42723c1ccee56e76181aebcc909", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "If you want to access the jobs of your organization, ensure that you selected it, in the top left corner.\\nChoose your subscribed service from the list of subscribed services.\\nIn the \\\"Subscriptions\\\" section, click on \\\"Activity Logs\\\".\\nLocate the relevant service execution and click on \\\"Show Jobs\\\".\\nNOTE\\nDue to confidentiality reasons, you\\ncannot\\naccess jobs from service executions initiated by external users or organizations, even if you are hosting the service.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nManage Access Tokens\\nNext page\\nIntroduction\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/manage-quantum-jobs.html\"\n}", "mimetype": "text/plain", "start_char_idx": 2654, "end_char_idx": 3391, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "873d7150-b78f-4a44-baa4-d408197aaf05": {"__data__": {"id_": "873d7150-b78f-4a44-baa4-d408197aaf05", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "hash": "84c64d3df166d6007c1cb936886802cbb74ed23062693b0e2907248e8ef703ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f01664e-2ddd-4401-a7c3-fd25d65fb751", "node_type": "1", "metadata": {}, "hash": "d30c90772fecb8f1b84fb4767f37ed06460bd709fe13c5af6e6edef51cee039b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Implementation Settings | PLANQK Docs\",\n  \"content\": \"Implementation Settings | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1121, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f01664e-2ddd-4401-a7c3-fd25d65fb751": {"__data__": {"id_": "8f01664e-2ddd-4401-a7c3-fd25d65fb751", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "hash": "84c64d3df166d6007c1cb936886802cbb74ed23062693b0e2907248e8ef703ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "873d7150-b78f-4a44-baa4-d408197aaf05", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "hash": "d539d86806a799fe972e0ae75842e6f0b4125dd5d2d7afb03bab406f4242bd69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd5f829a-00fb-435d-b93d-d21a64444f0b", "node_type": "1", "metadata": {}, "hash": "6f7b946c289a56ab97c5eee0b6b465ae9ed5f0ec05e35a619859fdd1879f9dee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nImplementation Settings\\n\u200b\\nIn this section you will learn how to manage the settings of your implementation.\\nChange visibility\\n\u200b\\nWhen you create your implementation it is\\nprivate\\nby default. Unless the implementation is owned by an\\norganization\\n, you are the only one who can see your implementation and update any code. In the settings of your implementation you can change the visibility to\\npublic\\n.\\nPublic\\nmeans that all PLANQK users can see your implementation and its code.", "mimetype": "text/plain", "start_char_idx": 1029, "end_char_idx": 2027, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd5f829a-00fb-435d-b93d-d21a64444f0b": {"__data__": {"id_": "dd5f829a-00fb-435d-b93d-d21a64444f0b", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f05303ff-bb1a-498c-a3f6-9b67011d5459", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "hash": "84c64d3df166d6007c1cb936886802cbb74ed23062693b0e2907248e8ef703ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f01664e-2ddd-4401-a7c3-fd25d65fb751", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}, "hash": "5214da5c538a7580d3da9f6ff620dbdb1b04ea09ed842d7548db51bd27bba1d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "However, they are not allowed to make any changes to your implementation.\\nManaging Members\\n\u200b\\nIf you want to grant certain users access to your implementation, you can add them as members. A member can have the role\\nViewer\\n,\\nMaintainer\\nor\\nOwner\\n.\\nViewer\\n: Can see the implementation and its code, but cannot make any changes.\\nMaintainer\\n: Has all the rights of a Viewer and can make changes to the code.\\nOwner\\n: Has all rights of a Maintainer and can manage the implementation settings, e.g., adding users, changing the visibility, and deleting the implementation.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nGetting Started\\nNext page\\nCreate a Service\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/implementations/settings.html\"\n}", "mimetype": "text/plain", "start_char_idx": 2028, "end_char_idx": 2871, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8d57247-26a3-4e02-a744-683e6b3b0ca0": {"__data__": {"id_": "e8d57247-26a3-4e02-a744-683e6b3b0ca0", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1149c73-8a55-42c1-bd21-2ec34a3a630e", "node_type": "1", "metadata": {}, "hash": "40b000b1e2eb55c7858d538701fad09dd17c835cda1e9d4daddd478fc11ba5fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n  \"title\": \"Getting started | PLANQK Docs\",\n  \"content\": \"Getting started | PLANQK Docs\\nSkip to content\\nSearch\\nK\\nMain Navigation\\nLogin\\nSign Up\\nPricing\\nQuantum Backends\\nAppearance\\nMenu\\nReturn to top\\nSidebar Navigation\\nGetting Started\\nQuickstart\\nAvailable Backends\\nQuantum SDK\\nService SDK\\nCLI Reference\\nplanqk.json Reference\\nManage Organizations\\nManage Access Tokens\\nManage Quantum Jobs\\nImplementations\\nIntroduction\\nGetting Started\\nImplementation Settings\\nCreate a Service\\nManaged Services\\nIntroduction\\nService Configuration\\nDescribe your API\\nRun as Jobs\\nCustom Docker Containers\\nRuntime Interface\\nUsing a Service\\nApplications\\nUsing a Service\\nService Orchestration\\nIntroduction\\nThe Workflow Editor\\nA Workflow Example\\nOn-Premise Services\\nIntroduction\\nPublish on Marketplace\\nReport Service Usage\\nDemos\\nIntroduction\\nDeploy a Demo\\nSet Environment Variables\\nStarter Templates\\nAutomation\\nCI/CD Integration with PLANQK\\nGitHub Workflows\\nGitLab CI\\nTutorials\\nExecute Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b1149c73-8a55-42c1-bd21-2ec34a3a630e": {"__data__": {"id_": "b1149c73-8a55-42c1-bd21-2ec34a3a630e", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8d57247-26a3-4e02-a744-683e6b3b0ca0", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "510d198f8dc864c813f32ffcc1b67e6daeffbef50d3a8cebfd34d4753c69c6ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86834791-dbed-416b-ab38-474f85561c5f", "node_type": "1", "metadata": {}, "hash": "4a99db968788604dba2cc462f34f75b6c677888875d957b2ef75a2baac551db4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Qiskit Circuits using the PLANQK Quantum SDK\\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\\nUtilize the PLANQK Service SDK for Local Development\\nCreate and Test an On-Premise Service\\nAccess D-Wave Leap in a PLANQK Service\\nAccess IBM Quantum Platform Backends in a PLANQK Service\\nUse Qiskit Runtime in a PLANQK Service\\nCommunity\\nIntroduction\\nAlgorithms\\nData Pools\\nUse Cases\\nMarkdown & LaTeX\\nManage Permissions\\nPublishing Content\\nReviews\\nOn this page\\nGetting started\\n\u200b\\nThis beginner-friendly guide will teach you the basic skills you need to create and manage your first implementation.\\nRequirements\\n\u200b\\nThis guide assumes that you have Git installed on your machine. If you do not have git available as a CLI command yet, you will need to install Git for your platform.\\nCreating an implementation\\n\u200b\\nTo create a new Implementation, visit the\\nCreate Implementation\\npage.", "mimetype": "text/plain", "start_char_idx": 1013, "end_char_idx": 1947, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86834791-dbed-416b-ab38-474f85561c5f": {"__data__": {"id_": "86834791-dbed-416b-ab38-474f85561c5f", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1149c73-8a55-42c1-bd21-2ec34a3a630e", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c0d37fed8af6e5a9154817267f8b5ee5f3cfdb918f2a5cae5854dd5d1ad01297", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f", "node_type": "1", "metadata": {}, "hash": "68d94dfb255a90c1c4bb5a7f5f840ee6df82a0b05a8e4282ae71d8d23abda4b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Enter a name for your implementation and click on the \\\"Create\\\" button.\\nAfter creating the implementation, you should see a page like this:\\nNote that the lock icon indicates that the implementation is\\nprivate\\n. Learn how to make your implementation\\npublic\\nin the\\nsettings\\nsection.\\nMoreover, the empty implementation page provides you a set of command line instructions to clone the repository and start working on your implementation. In the following we will go through the steps to clone the repository and add a README file.\\nCloning the repository locally\\n\u200b\\nDownloading the implementation to your local machine is called cloning. You can clone the implementation and navigate to it using the following commands:\\nbash\\ngit\\nclone\\nhttps://planqk:\\n<\\npersonal-access-toke\\nn\\n>\\n@git.platform.planqk.de/\\n<\\nyour-user-i\\nd\\n>\\n/\\n<\\nimplementation-nam\\ne\\n>\\n.git\\ncd\\n<\\nimplementation-nam\\ne\\n>\\nBest\\njust copy the clone command\\nfrom the command line instructions on the implementation page.", "mimetype": "text/plain", "start_char_idx": 1948, "end_char_idx": 2959, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f": {"__data__": {"id_": "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86834791-dbed-416b-ab38-474f85561c5f", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "41719125c1b0f62e6412fbf7a5fde6f2975bf01a0ac972a4640289522cc9f72a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51cfbe60-1ff4-4ced-ada5-b507bc417073", "node_type": "1", "metadata": {}, "hash": "beef40b9c989fc01293e5315cef9ad72015d40cee9c6b7c295e408df47efd182", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "This command already contains the\\ncorrect URL\\nto clone the repository.\\nAuthentication\\nThe PLANQK Git Server supports HTTPS with basic authentication. You can authenticate by providing your personal access token in the Git URL. You can clone any repository that you have at least 'Viewer' permissions for. Learn more about permissions in the\\nsettings\\nsection.\\nAdd a README\\n\u200b\\nNow let's add a README file to your repository that provides information about your implementation. Feel free to add some markdown content to the README file.\\nbash\\ntouch\\nREADME.md\\nPush your changes\\n\u200b\\nYou can use Git to save new files and any changes to already existing files as a bundle of changes called a\\ncommit\\n, which can be thought of as a \u201crevision\u201d to your project. In order to sync the new commit with PLANQK, you then\\npush\\nthe commit. Push your code using the following commands:\\nbash\\n## Create any file you like and add some content!", "mimetype": "text/plain", "start_char_idx": 2960, "end_char_idx": 3899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51cfbe60-1ff4-4ced-ada5-b507bc417073": {"__data__": {"id_": "51cfbe60-1ff4-4ced-ada5-b507bc417073", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "ca32965e8372945461c6840524ac0337013eace13460a2a3876b4627e6b76033", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c15527ce-b872-4712-9569-ec4b9b2a18ed", "node_type": "1", "metadata": {}, "hash": "fac9da841c2c6091545f112bb3fd4168613c7e0f3a6d57c31ef5dd04246e3a2b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Push your code using the following commands:\\nbash\\n## Create any file you like and add some content! Then...\\ngit\\nadd\\n.\\ngit\\ncommit\\n-m\\n\\\"add README\\\"\\ngit\\npush\\n--set-upstream\\norigin\\nmain\\nThat's it! After refreshing your implementation page, you will see all your recently added files. For example in the screenshot below the user added its implementation for a\\nManaged Service\\n.\\nNote that one of the files is a Dockerfile.", "mimetype": "text/plain", "start_char_idx": 3798, "end_char_idx": 4234, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c15527ce-b872-4712-9569-ec4b9b2a18ed": {"__data__": {"id_": "c15527ce-b872-4712-9569-ec4b9b2a18ed", "embedding": null, "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa", "node_type": "4", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "c1bf5eed50e99463aba4d23d2e25dbcf91d8bc43a8e150a83f2dd6447a108631", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51cfbe60-1ff4-4ced-ada5-b507bc417073", "node_type": "1", "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}, "hash": "159632aecbd3092e6f58d15191d5c427f95b310bbbf67d12c9464c40e1b6a2c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In case a Dockerfile is present in the implementation a \\\"Create Service\\\" button is available in the UI to\\ncreate a PLANQK Service\\nbased on the implementation.\\nWhat's next?\\n\u200b\\nLearn how to\\nmanage permissions\\n.\\nLearn how to\\nshare your implementation with the community\\n.\\nLearn how to\\ncreate a PLANQK Service\\n.\\nHelp us improve this page!\\nLast updated:\\nPager\\nPrevious page\\nIntroduction\\nNext page\\nImplementation Settings\\nPublished under the CC-BY-4.0 License.\\nCopyright \u00a9 2023-present | Kipu Quantum GmbH\",\n  \"url\": \"https://docs.planqk.de/implementations/getting-started.html\"\n}", "mimetype": "text/plain", "start_char_idx": 4235, "end_char_idx": 4832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"2f4895cc-44dd-43bb-885e-58bbac3cda04": {"node_ids": ["869187dd-05cc-45da-af3b-a6a2c1c61430", "0e88d51f-3e8b-42a9-a2ac-719403f35fa6", "34867761-ca92-49f5-93a2-fae7653fc3e7", "93e67c8e-01ec-44c6-a2c2-be2a72b79900"], "metadata": {"filename": "docs.planqk.de_manage-organizations.html.json"}}, "3ed15960-b4db-4f00-8fcb-99aa259fe9fc": {"node_ids": ["5e9ae342-14cb-45ac-bd46-0c090894dfff", "99ae456d-79b6-433c-92bc-5fbe18061d49", "e197ee7c-250f-48c7-a754-16dffa1d12ad", "330cac46-4de1-420b-9e42-e2d18f5cdc3f", "5b543fb8-50c6-4bfc-9b6d-ffaef64f8726"], "metadata": {"filename": "docs.planqk.de_planqk-json-reference.html.json"}}, "534d6b09-3243-4745-8ffc-9500e1bba1f0": {"node_ids": ["de6a41f6-eaba-410f-b3f3-fc344bf64f16", "be143822-5c5e-431e-bd74-379598bbbf61", "98776328-2b6f-4d03-a2f6-c0cf2f8dc7d8", "60ce164b-857f-4597-91d5-59e1b75b420b", "22dff272-c3b1-44c2-a327-a3b8b78540ef", "c83d2d10-8812-410e-8d04-59b690abf466", "ffa185e4-38b5-4ee1-b6f9-6f3be81d40dd", "f529ddeb-5375-4cce-b311-a6790ab1dc1f", "15c1a737-f5fd-4da0-aee9-7ee6cf864eea", "ed343f4d-713a-475d-a14d-edea546a84c6", "d03b2af9-c409-4096-a06e-cb2930365c0f", "8f029def-8a14-4b87-b19c-f81a4e3a8b0b", "5e425670-fb3d-4e56-b13a-1b35e244b6e8", "4c2b8777-f0f8-49d7-a5a3-2e4e74cb4b07", "242ec554-0b84-44e0-b1ed-e396f003f1ca", "c50ab61b-1cb1-45bb-83f2-88abfb1df0e5", "0826d36a-04f7-4fe3-a4c3-4903e7644c03", "0996652b-8eb2-4bec-b3d1-befe803eab93", "226b832f-d6e9-4359-827d-6aaa677d81e1", "798ebf3c-d869-4ae8-ba38-821f7fa938b1", "90fff491-109e-467b-9019-f55b95b26d46", "a1fc8580-9bef-40fd-b200-9ae280024783", "f2dc587f-6d1b-479b-bfdb-ba1826be763a", "c7a9fbc7-766e-4ab6-8d47-4f01b2597136", "96e2b51f-d02b-4bab-9b14-b166ecd5813b", "c47cb362-05af-43b1-b443-a3bc94edc33d", "b53ab24c-4e8c-4904-b3c6-705f437d21fc"], "metadata": {"filename": "docs.planqk.de_sdk-reference.html.json"}}, "30bcef86-6ac1-4e49-a995-81cf5e30cb7d": {"node_ids": ["eecb45fe-0882-4e39-b4a3-d932e8ddc2a9", "8f2d3471-a6e3-4b7f-a933-81f2f3c0586e", "2c8f740b-eff5-40e1-90ab-fd8761ed53f4"], "metadata": {"filename": "docs.planqk.de_implementations_introduction.html.json"}}, "c3df90dc-5eb4-4aa0-befa-38adc10f885c": {"node_ids": ["6f73dbe5-a6a4-4299-8dde-57349ee461e5"], "metadata": {"filename": "platform.planqk.de_quantum-backends.json"}}, "b7bbf1e4-5f3d-4f35-b570-18b46dcf3382": {"node_ids": ["b6f136f2-41f7-427b-972c-99d148e8f0d6", "c47d06ee-4281-4432-8938-e1956e39a300", "352bda03-c304-4a89-b936-0c4907126b12", "fbcfbe19-3584-401a-b01c-17f2c3857e6d"], "metadata": {"filename": "docs.planqk.de_manage-access-tokens.html.json"}}, "d0c5b4c6-1282-4fbc-a989-168494d920a7": {"node_ids": ["17ad4e46-17c8-46e4-85b5-e337fd7f3811", "5cb17e70-bcfa-4f60-ad28-4470886cf744", "50605842-e7a2-4960-b44f-519a5ef694f8", "a18d879f-b48c-4336-9453-86f8072126f8", "9b7e9b54-204c-44f6-a0a7-24a228c8cae6", "201a8e90-d7fc-4f0f-bfd2-72f6ee40d552", "c035760e-2712-4512-82d8-349f06f40cbd", "c2b1c171-7a0b-4e9b-99d2-b1b782a9ab75", "78b5d6d6-68b4-44b0-b129-d8d604c65194", "ec98bd42-7c0c-45ab-857d-25059459c406"], "metadata": {"filename": "docs.planqk.de_sdk-reference-service.html.json"}}, "7cae7cea-0cc1-40b9-a985-0a2b79001fec": {"node_ids": ["f6f1bb08-88cc-4d32-9b78-6471e91c69af", "c321bcd7-dc25-4292-aa9d-fa46ec798942", "d0c08dc7-47be-4c12-b5bb-44df475f9bee", "ec8a319b-19e1-4fd9-a1fa-e5b67cbeac2b", "810c5f75-bfee-4b24-ae45-2b5ee259b1ab", "29a995dc-e395-4a21-96d8-e473f4ca2f27", "2c6c81cf-49a1-4d3f-9884-b02309286afe", "5e45d96b-71fa-4752-bbe0-0380e6748522", "7f2073db-e48f-4cb1-8b25-4a2b396e7def", "fb32897d-ce13-43d4-8509-05f8e2e7f254", "c82ba85c-38d9-4f7b-a9f5-74df5c238a47", "d3a9b345-ba09-4060-a1b9-c1a4545bc1d2", "a9b4960f-abe9-403e-b53e-b23113a83e19"], "metadata": {"filename": "docs.planqk.de_cli-reference.html.json"}}, "3d08291a-17c8-4b27-bea9-216bc4194283": {"node_ids": ["37708308-f3d8-4e62-b0f3-de2d56e46ab1", "46e7a9e7-f00d-40b1-b48e-3d0578138670", "32d40aa2-8b2b-47b5-8fd5-86d7beb63427", "e088cf52-ee34-4ada-aabc-d721748754a3", "8b8f2811-6b63-4d4c-9605-7bde2252d332"], "metadata": {"filename": "docs.planqk.de_implementations_create-a-service.html.json"}}, "1dfbed65-f739-4161-8b53-7c41703635da": {"node_ids": ["8b8d1aab-cb71-408c-9b36-3d4392a9ec28", "891fd70b-ea94-4bfa-bb70-a71744f9d0c5", "b07c7d49-28f9-45ff-8f4f-e06aa38316b2", "3f79e87a-9bf2-4528-ad1b-d98967f13768"], "metadata": {"filename": "docs.planqk.de_manage-quantum-jobs.html.json"}}, "f05303ff-bb1a-498c-a3f6-9b67011d5459": {"node_ids": ["873d7150-b78f-4a44-baa4-d408197aaf05", "8f01664e-2ddd-4401-a7c3-fd25d65fb751", "dd5f829a-00fb-435d-b93d-d21a64444f0b"], "metadata": {"filename": "docs.planqk.de_implementations_settings.html.json"}}, "2bd5fea5-57d3-4f0a-a0cb-e5ec45e1d5aa": {"node_ids": ["e8d57247-26a3-4e02-a744-683e6b3b0ca0", "b1149c73-8a55-42c1-bd21-2ec34a3a630e", "86834791-dbed-416b-ab38-474f85561c5f", "f52bc5e3-a79a-40ea-83fb-2a5b7ec9245f", "51cfbe60-1ff4-4ced-ada5-b507bc417073", "c15527ce-b872-4712-9569-ec4b9b2a18ed"], "metadata": {"filename": "docs.planqk.de_implementations_getting-started.html.json"}}}}
{
  "title": "Quickstart | PLANQK Docs",
  "content": "Quickstart | PLANQK Docs\nSkip to content\nSearch\nK\nMain Navigation\nLogin\nSign Up\nPricing\nQuantum Backends\nAppearance\nMenu\nReturn to top\nSidebar Navigation\nGetting Started\nQuickstart\nAvailable Backends\nQuantum SDK\nService SDK\nCLI Reference\nplanqk.json Reference\nManage Organizations\nManage Access Tokens\nManage Quantum Jobs\nImplementations\nIntroduction\nGetting Started\nImplementation Settings\nCreate a Service\nManaged Services\nIntroduction\nService Configuration\nDescribe your API\nRun as Jobs\nCustom Docker Containers\nRuntime Interface\nUsing a Service\nApplications\nUsing a Service\nService Orchestration\nIntroduction\nThe Workflow Editor\nA Workflow Example\nOn-Premise Services\nIntroduction\nPublish on Marketplace\nReport Service Usage\nDemos\nIntroduction\nDeploy a Demo\nSet Environment Variables\nStarter Templates\nAutomation\nCI/CD Integration with PLANQK\nGitHub Workflows\nGitLab CI\nTutorials\nExecute Qiskit Circuits using the PLANQK Quantum SDK\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\nUtilize the PLANQK Service SDK for Local Development\nCreate and Test an On-Premise Service\nAccess D-Wave Leap in a PLANQK Service\nAccess IBM Quantum Platform Backends in a PLANQK Service\nUse Qiskit Runtime in a PLANQK Service\nCommunity\nIntroduction\nAlgorithms\nData Pools\nUse Cases\nMarkdown & LaTeX\nManage Permissions\nPublishing Content\nReviews\nOn this page\nQuickstart\nâ€‹\nThis page provides a crash course on using PLANQK to run an entire quantum workflow, from development to deployment ðŸš€.\nFirst of all,\ncreate an account\nif you don't have one yet.\nInstall the PLANQK CLI\nâ€‹\nTo install the PLANQK CLI, you must install Node.js 18 or higher and the\nnpm\ncommand line interface using either a\nNode version manager\nor a\nNode installer\n.\nThen install the PLANQK CLI using\nnpm\n:\nbash\nnpm\ninstall\n-g\n@planqk/planqk-cli\nTIP\nTake a look at the\nCLI reference\nfor more information on the available commands.\nLogin to your account\nâ€‹\nCopy your\npersonal access token\nto your clipboard.\nLogin to your account using your access token:\nbash\nplanqk\nlogin\n-t\n<\nyour\naccess\ntoke\nn\n>\nTIP\nIf you like to work in the context of an organization you joined on PLANQK, run\nplanqk set-context\nand select the organization you want to work with.\nRun your first quantum program\nâ€‹\nThe PLANQK Quantum SDK provides an easy way to develop quantum circuits that can be executed on quantum backends/devices available through PLANQK. The SDK allows you to use your favorite quantum libraries, such as Qiskit and AWS Braket, to construct circuits and run them on quantum hardware in the cloud.\nFirst of all, install the PLANQK Quantum SDK:\nshell\npip\ninstall\n--upgrade\nplanqk-quantum\nIMPORTANT\nYou need Python 3.11 or higher to use the PLANQK Quantum SDK.\nTo run a Qiskit program, all you need is an account and three lines of PLANQK Quantum code:\npython\nfrom\nplanqk.qiskit\nimport\nPlanqkQuantumProvider\n...\nqiskit_circuit\n=\n...\n# create your Qiskit circuit here\n...\nprovider\n=\nPlanqkQuantumProvider(\naccess_token\n=\n\"YOUR_PERSONAL_ACCESS_TOKEN_HERE\"\n)\nresult\n=\nprovider.get_backend(\n\"azure.ionq.simulator\"\n).run(qiskit_circuit,\nshots\n=\n100\n).result()\nTIP\nWe recommend using the PLANQK CLI to log in and authenticate with PLANQK. Then, you can use the\nPlanqkQuantumProvider\nwithout specifying the access token:\npython\nprovider\n=\nPlanqkQuantumProvider()\nExample: Coin Toss\nâ€‹\nNext, we build a circuit (quantum algorithm) that performs\nn\ncoin tosses on a Quantum Computer. Instead of heads and tails, we work with 0s and 1s. This means, there will be\n2^n\npossible outcomes, and each time (number of shots) we measure the quantum state, we observe one of these outcomes.\npython\nfrom\nplanqk.qiskit\nimport\nPlanqkQuantumProvider\nfrom\nqiskit\nimport\nQuantumCircuit, transpile\nn_coin_tosses\n=\n2\ncircuit\n=\nQuantumCircuit(n_coin_tosses)\nfor\ni\nin\nrange\n(n_coin_tosses):\ncircuit.h(i)\ncircuit.measure_all()\n# Use the PLANQK CLI and log in with \"planqk login\" or set the environment variable PLANQK_PERSONAL_ACCESS_TOKEN.\n# Alternatively, you can pass the access token as an argument to the constructor\nprovider\n=\nPlanqkQuantumProvider(\naccess_token\n=\n\"YOUR_PERSONAL_ACCESS_TOKEN_HERE\"\n)\n# Select a quantum backend suitable for the task. All PLANQK supported quantum backends are\n# listed at https://platform.planqk.de/quantum-backends.\nbackend\n=\nprovider.get_backend(\n\"azure.ionq.simulator\"\n)\n# Transpile the circuit ...\ncircuit\n=\ntranspile(circuit, backend)\n# ... and run it on the backend\njob\n=\nbackend.run(circuit,\nshots\n=\n100\n)\ncounts\n=\njob.result().get_counts()\nA possible outcome of the coin toss quantum algorithm could be:\nTIP\nWe have prepared a Jupyter notebook that you can use to immediately run the Quantum Coin Toss example:\ncoin_toss.ipynb\nIMPORTANT\nAccess to IonQ's quantum simulator (\nazure.ionq.simulator\n) is free of charge. Other backends/devices requires an account with active payment information.\nCreate your first PLANQK Service project\nâ€‹\nCreate a new project by running the following command:\nbash\nplanqk\ninit\nYou will be prompted to provide some information about your project. For this quickstart, select the following configuration:\nService name\n:\nmy-project\nStarter template\n:\nPython Starter\nvCPU configuration\n:\n1 vCPU\nMemory configuration\n:\n1GB\nThis will create a new directory called\nmy-project\ncontaining all required files to run your quantum code on PLANQK. The\nPython Starter\ntemplates implement the coin toss example from above as a PLANQK Service.\nNote the\nplanqk.json\nfile in the project directory, which contains the project configuration, for example:\njson\n{\n\"name\"\n:\n\"my-project\"\n,\n\"descriptionFile\"\n:\n\"README.md\"\n,\n\"resources\"\n: {\n\"cpu\"\n:\n1\n,\n\"memory\"\n:\n1\n},\n\"runtime\"\n:\n\"PYTHON_TEMPLATE\"\n}\nTIP\nFor more information on the bootstrapped project structure, see the\nREADME.md\nfile in the project directory.\nTest your service locally\nâ€‹\nLet's test your service locally before deploying it to PLANQK. First, switch to your project directory:\nbash\ncd\nmy-project\nThen, install the required dependencies. We recommend creating a dedicated Python environment to install and track all required packages from the start. You may use the\nrequirements.txt\nfile to create a virtual environment with the tooling of your choice.\nFor example, you can use\nuv\nto create a virtual environment and install the required packages:\nbash\nuv\nvenv\nuv\nsync\nsource\n.venv/bin/activate\nOpen the\nsrc/program.py\nfile, modify the following line and enter your personal access token:\npython\nprovider\n=\nPlanqkQuantumProvider(\naccess_token\n=\n\"YOUR_PERSONAL_ACCESS_TOKEN_HERE\"\n)\nFinally, run your service locally:\nbash\npython\n-m\nsrc\nThe output should look like this:\njson\n{\n\"counts\"\n: {\n\"000\"\n:\n6\n,\n\"001\"\n:\n13\n,\n\"010\"\n:\n19\n,\n\"011\"\n:\n18\n,\n\"100\"\n:\n8\n,\n\"101\"\n:\n14\n,\n\"110\"\n:\n8\n,\n\"111\"\n:\n14\n},\n\"elapsed_time\"\n:\n17.837932109832764\n}\nTest your service locally using PLANQK CLI\nâ€‹\nTo begin, navigate to your project directory:\nbash\ncd\nmy-project\nNext, run the following command:\nbash\nplanqk\nserve\nOnce the server is operational, you can access\nhttp://localhost:8081/docs\n. This interface provides you the ability to run your current code and see the results. Further information can be found in the\nPLANQK CLI reference\n.\nOpen the\nPOST /\noperation and click on the \"Try it out\" button. Paste the following JSON into the request body field:\njson\n{\n\"data\"\n: {\n\"n_coin_tosses\"\n:\n2\n}\n}\nClick on the \"Execute\" button to run the service. The response body will contain the ID of the service execution. Copy the ID to your clipboard.\nOpen the\nGET /{id}\noperation and click on the \"Try it out\" button. Paste the ID into the\nid\nfield and click on the \"Execute\" button. You can use this endpoint to check the status of the service execution. If the status is\nSUCCEEDED\n, you can retrieve the result.\nOpen the\nGET /{id}/result\noperation and click on the \"Try it out\" button. Paste the ID into the\nid\nfield and click on the \"Execute\" button. The response body will contain the result of the service execution, similar to this:\njson\n{\n\"counts\"\n: {\n\"10\"\n:\n30\n,\n\"11\"\n:\n25\n,\n\"00\"\n:\n24\n,\n\"01\"\n:\n21\n},\n\"elapsed_time\"\n:\n11.129297733306885\n,\n\"_links\"\n: {\n\"status\"\n: {\n\"href\"\n:\n\"/5b25134c-dd05-47a0-9c12-ff9816074936\"\n}\n},\n\"_embedded\"\n: {\n\"status\"\n: {\n\"id\"\n:\n\"5b25134c-dd05-47a0-9c12-ff9816074936\"\n,\n\"status\"\n:\n\"SUCCEEDED\"\n,\n\"created_at\"\n:\n\"2025-03-24 11:16:20\"\n,\n\"started_at\"\n:\n\"2025-03-24 11:16:20\"\n,\n\"ended_at\"\n:\n\"2025-03-24 11:16:32\"\n}\n}\n}\nPress Ctrl+C to stop the local server.\nDeploy your service\nâ€‹\nTo deploy your service to the PLANQK Platform, run the following command in your project directory:\nbash\nplanqk\nup\nThis will compress your project directory and upload it to the PLANQK Platform. After a successful deployment, you will find the service in the\nServices\nsection.\nAlternatively, you can create a ZIP file of your project and upload it manually to PLANQK:\nbash\nplanqk\ncompress\nBoth commands,\nplanqk up\nand\nplanqk compress\nconsider the definitions from the\n.planqkignore\nfile to exclude files and directories from being uploaded or compressed.\nExecute your service\nâ€‹\nExecute your service with the example input data stored in\ninput/data.json\nand\ninput/params.json\nby running the following command:\nbash\nplanqk\nrun\nAfter a successful execution, the output should look like this:\nRunning Job (a7a3422b-9522-408b-96c9-32cdb497b12b)... Job succeeded.\nSee result at https://platform.planqk.de/jobs/a7a3422b-9522-408b-96c9-32cdb497b12b\nFor more details and options of the\nplanqk run\ncommand, see the\nCLI reference\n.\nWhat's next?\nâ€‹\nplay_arrow\nDiscover our Quantum Backends\nLearn about our supported quantum backends and how to use them.\nschool\nExplore our Tutorials\nCheck out our tutorials to get started with quantum computing on PLANQK.\ncode\nDeep Dive into the Quantum SDK\nLearn how to use our SDK to interact with our supported quantum backends.\ncode\nGet Started with the Service SDK\nLearn how to interact with your deployed services using Python.\nHelp us improve this page!\nLast updated:\nPager\nNext page\nAvailable Backends\nPublished under the CC-BY-4.0 License.\nCopyright Â© 2023-present | Kipu Quantum GmbH\n\nsource: https://docs.planqk.de/quickstart.html",
  "url": "https://docs.planqk.de/quickstart.html"
}
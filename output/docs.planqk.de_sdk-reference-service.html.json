{
  "title": "Accessing Services in Python | PLANQK Docs",
  "content": "Accessing Services in Python | PLANQK Docs\nSkip to content\nSearch\nK\nMain Navigation\nLogin\nSign Up\nPricing\nQuantum Backends\nAppearance\nMenu\nReturn to top\nSidebar Navigation\nGetting Started\nQuickstart\nAvailable Backends\nQuantum SDK\nService SDK\nCLI Reference\nplanqk.json Reference\nManage Organizations\nManage Access Tokens\nManage Quantum Jobs\nImplementations\nIntroduction\nGetting Started\nImplementation Settings\nCreate a Service\nManaged Services\nIntroduction\nService Configuration\nDescribe your API\nRun as Jobs\nCustom Docker Containers\nRuntime Interface\nUsing a Service\nApplications\nUsing a Service\nService Orchestration\nIntroduction\nThe Workflow Editor\nA Workflow Example\nOn-Premise Services\nIntroduction\nPublish on Marketplace\nReport Service Usage\nDemos\nIntroduction\nDeploy a Demo\nSet Environment Variables\nStarter Templates\nAutomation\nCI/CD Integration with PLANQK\nGitHub Workflows\nGitLab CI\nTutorials\nExecute Qiskit Circuits using the PLANQK Quantum SDK\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\nUtilize the PLANQK Service SDK for Local Development\nCreate and Test an On-Premise Service\nAccess D-Wave Leap in a PLANQK Service\nAccess IBM Quantum Platform Backends in a PLANQK Service\nUse Qiskit Runtime in a PLANQK Service\nCommunity\nIntroduction\nAlgorithms\nData Pools\nUse Cases\nMarkdown & LaTeX\nManage Permissions\nPublishing Content\nReviews\nOn this page\nAccessing Services in Python\n​\nThe PLANQK Service SDK enables you to access and monitor your deployed services directly from a Python program.\nInstallation\n​\nBegin by installing the PLANQK Service SDK using\npip\n:\nbash\npip\ninstall\n--upgrade\nplanqk-service-sdk\nUsing the SDK\n​\nReplace the placeholders\nyour_consumer_key\nand\nyour_consumer_secret\nin the code snippet below with the credentials provided in one of your platform applications. Additionally, configure the\nservice_endpoint\nto the endpoint URL of the subscribed PLANQK service (see list of subscriptions in an application).\npython\n# Your consumer key and secret from your application details\nconsumer_key\n=\n\"your_consumer_key\"\nconsumer_secret\n=\n\"your_consumer_secret\"\n# Service endpoint from the application's subscription details\nservice_endpoint\n=\n\"https://gateway.platform.planqk.de/...\"\nCreate a client and start a service execution:\npython\nfrom\nplanqk.service.client\nimport\nPlanqkServiceClient\n# Create a client\nclient\n=\nPlanqkServiceClient(service_endpoint, consumer_key, consumer_secret)\n# Prepare your input data and parameters\ndata\n=\n{\n\"input\"\n: {\n\"a\"\n:\n1\n,\n\"b\"\n:\n2\n}}\nparams\n=\n{\n\"param1\"\n:\n\"value1\"\n,\n\"param2\"\n:\n\"value2\"\n}\n# Start a service execution\nservice_execution\n=\nclient.run(\nrequest\n=\n{\n\"data\"\n: data,\n\"params\"\n: params})\n# Wait for the service execution to finish (blocking)\nservice_execution.wait_for_final_state()\nprint\n(\nf\n\"Service execution finished at '\n{\nservice_execution.ended_at\n}\n' with status '\n{\nservice_execution.status\n}\n'\"\n)\nYou may perform other operations while waiting for the service execution to finish:\npython\nwhile\nnot\nservice_execution.has_finished:\nprint\n(\n\"Waiting for service execution to finish...\"\n)\nAlternatively, you may poll the service execution status:\npython\nwhile\nservice_execution.status\nnot\nin\n[\n\"SUCCEEDED\"\n,\n\"FAILED\"\n,\n\"CANCELLED\"\n]:\nservice_execution.refresh()\nUse the client to retrieve a service execution by its ID:\npython\nservice_execution\n=\nclient.get_service_execution(\n\"0030737b-35cb-46a8-88c2-f59d4885484d\"\n)\nprint\n(\nf\n\"Service execution finished at '\n{\nservice_execution.ended_at\n}\n' with status '\n{\nservice_execution.status\n}\n'\"\n)\nRetrieve the result:\npython\nresult\n=\nservice_execution.result()\nRetrieve service execution logs:\npython\nlogs\n=\nservice_execution.logs()\nprint\n(\n\"...\"\n)\nfor\nlog\nin\nlogs[\n-\n5\n:]:\nprint\n(log)\nList and download the result files:\npython\nimport\nos\n# List the result files\nfiles\n=\nservice_execution.result_files()\n# Download the result files\ncwd\n=\nos.getcwd()\nfor\nfile\nin\nfiles:\nservice_execution.download_result_file(\nfile\n, cwd)\nprint\n(files)\nAlternatively, you may access the raw byte stream:\npython\nfile_stream\n=\nservice_execution.result_file_stream(\n\"output.json\"\n)\nwith\nopen\n(\n\"output.json\"\n,\n\"wb\"\n)\nas\nf:\nfor\nchunk\nin\nfile_stream:\nf.write(chunk)\nUse a Data Pool as input data:\npython\nfrom\nplanqk.service.sdk.types.input_data_ref\nimport\nInputDataRef\n# Create a client\nclient\n=\nPlanqkServiceClient(service_endpoint, consumer_key, consumer_secret)\n# Create a data pool, and upload a file called 'data.json'. Use the \"Copy File Reference\" button in\n# the PLANQK Data Pool UI to copy the data pool id, data source descriptor id, and file id. Paste the\n# copied values into the file_reference dictionary below.\nfile_reference\n=\n{\n\"dataPoolId\"\n:\n\"9b943af3-ca78-4d6e-87fd-33129f5330a2\"\n,\n\"dataSourceDescriptorId\"\n:\n\"a1e4f7ab-82d5-4158-98c3-3562635cedd2\"\n,\n\"fileId\"\n:\n\"f9b5c9a2-0101-46a8-9958-383670a2cef4\"\n,\n}\n# Use the InputDataRef class to define a reference to a file in a data pool.\ndata_ref\n=\nInputDataRef.model_validate(\n{\n\"data_pool_id\"\n: file_reference[\n\"dataPoolId\"\n],\n\"data_source_descriptor_id\"\n: file_reference[\n\"dataSourceDescriptorId\"\n],\n\"file_id\"\n: file_reference[\n\"fileId\"\n],\n}\n)\nparams\n=\n{\n\"param1\"\n:\n\"value1\"\n,\n\"param2\"\n:\n\"value2\"\n}\n# Start a service execution\nservice_execution\n=\nclient.run({\n\"dataRef\"\n: data_ref,\n\"params\"\n: params})\n# Wait for the service execution to finish (blocking)\nservice_execution.wait_for_final_state()\nprint\n(\nf\n\"Service execution finished at '\n{\nservice_execution.ended_at\n}\n' with status '\n{\nservice_execution.status\n}\n'\"\n)\nSupported Operations\n​\nThe SDK provides a simple interface to interact with the PLANQK Service API. Use the\nPlanqkServiceClient\nclass to create a client and start a service execution. The\nPlanqkServiceExecution\nclass represents a service execution and provides methods to monitor and manage it.\nPlanqkServiceClient\n​\nMethod\nDescription\n__init__\nInitializes the client with the service endpoint, consumer key, and secret.\nrun\nStarts a service execution with the provided request data and parameters. Returns a\nPlanqkServiceExecution\nobject.\nget_service_execution\nRetrieves a service execution by its ID. Returns a\nPlanqkServiceExecution\nobject.\nPlanqkServiceExecution\n​\nProperty\nDescription\nid\nThe ID of the service execution.\nstatus\nThe last known status of the service execution.\ncreated_at\nThe creation time of the service execution.\nstarted_at\nThe start time of the service execution.\nended_at\nThe end time of the service execution.\nhas_finished\nChecks if the service execution has finished.\nMethod\nDescription\nwait_for_final_state\nWaits for the service execution to reach a final state (blocking).\nrefresh\nPolls the service execution status.\nresult\nRetrieves the result of the service execution.\nresult_files\nLists the result files of the service execution.\ndownload_result_file\nDownloads a specific result file to the specified directory.\nresult_file_stream\nAccesses the raw byte stream of a specific result file.\ncancel\nCancels a service execution.\nlogs\nRetrieves the logs of the service execution.\nHelp us improve this page!\nLast updated:\nPager\nPrevious page\nQuantum SDK\nNext page\nCLI Reference\nPublished under the CC-BY-4.0 License.\nCopyright © 2023-present | Kipu Quantum GmbH",
  "url": "https://docs.planqk.de/sdk-reference-service.html"
}
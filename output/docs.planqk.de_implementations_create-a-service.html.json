{
  "title": "Create a Service | PLANQK Docs",
  "content": "Create a Service | PLANQK Docs\nSkip to content\nSearch\nK\nMain Navigation\nLogin\nSign Up\nPricing\nQuantum Backends\nAppearance\nMenu\nReturn to top\nSidebar Navigation\nGetting Started\nQuickstart\nAvailable Backends\nQuantum SDK\nService SDK\nCLI Reference\nplanqk.json Reference\nManage Organizations\nManage Access Tokens\nManage Quantum Jobs\nImplementations\nIntroduction\nGetting Started\nImplementation Settings\nCreate a Service\nManaged Services\nIntroduction\nService Configuration\nDescribe your API\nRun as Jobs\nCustom Docker Containers\nRuntime Interface\nUsing a Service\nApplications\nUsing a Service\nService Orchestration\nIntroduction\nThe Workflow Editor\nA Workflow Example\nOn-Premise Services\nIntroduction\nPublish on Marketplace\nReport Service Usage\nDemos\nIntroduction\nDeploy a Demo\nSet Environment Variables\nStarter Templates\nAutomation\nCI/CD Integration with PLANQK\nGitHub Workflows\nGitLab CI\nTutorials\nExecute Qiskit Circuits using the PLANQK Quantum SDK\nSolving the Maximum Independent Set Problem on QuEra Aquila using the PLANQK Quantum SDK\nUtilize the PLANQK Service SDK for Local Development\nCreate and Test an On-Premise Service\nAccess D-Wave Leap in a PLANQK Service\nAccess IBM Quantum Platform Backends in a PLANQK Service\nUse Qiskit Runtime in a PLANQK Service\nCommunity\nIntroduction\nAlgorithms\nData Pools\nUse Cases\nMarkdown & LaTeX\nManage Permissions\nPublishing Content\nReviews\nOn this page\nCreate a Service\nâ€‹\nThis step-by-step guide will teach you how to create a PLANQK service based on your implementation. You will learn how to initialize a Docker Python project using the\nPLANQK CLI\n, push its code to an implementation and create a PLANQK managed service based on it. This guide assumes that you already know the basics about\nmanaged services\nand\nimplementations\n.\nRequirements\nâ€‹\nThis guide assumes that you have the latest version of PLANQK CLI installed on your machine. If not you can install it by following the instructions in the\nCLI reference\n.\nInitialize a Docker Python Starter Project\nâ€‹\nThe PLANQK CLI provides you with a set of starter templates to help you get started quickly with your quantum services. You can see the full list of available templates in our\nGitLab repository\n. In this tutorial we will use the\nDocker Python Starter\ntemplate to create a new service based on custom Docker containers. To initialize the project, run the following command in your terminal:\nbash\nplanqk\ninit\nIn the interactive prompt:\nChoose a name, e.g.,\nmy-service\n.\nSelect\nDocker Starter\nas starter template.\nChoose your resource configuration, e.g., accept the defaults.\nAfter the initialization, you will find a new folder with the name of your service in the current directory. For sake of simplicity, we will not get into details of the generated code in this tutorial. You can check out the README file in the generated project for more information.\nCreate an implementation and push the code\nâ€‹\nNext,\ncreate a new Implementation\nand upload the code of your service. You can follow the steps in the\nGetting Started\nguide. After refreshing your implementation page, you should see all your added files. Similar to the screenshot below.\nCreate a service based on the implementation\nâ€‹\nAs your service code includes a Dockerfile, you should see the \"Create Service\" button in the action bar of your implementation page. Click on the button to create a new PLANQK service based on your implementation. Navigate to the\nServices\npage to see your new service. Congratulations, you have successfully created a PLANQK service based on your implementation ðŸŽ‰.\nHelp us improve this page!\nLast updated:\nPager\nPrevious page\nImplementation Settings\nNext page\nIntroduction\nPublished under the CC-BY-4.0 License.\nCopyright Â© 2023-present | Kipu Quantum GmbH",
  "url": "https://docs.planqk.de/implementations/create-a-service.html"
}